#!/usr/bin/python
#-*-coding:gbk -*-
'''
本模块提供了更趋向于面向对象的创建maya节点的方法
主要使用动态导入模块静态导入模块主要用于代码补全#在必要时提供静态导入避免错误#
模块结构：
    createNode()#节点创建函数#
    try:
        动态函数声明模块
    except:
        静态函数声明模块
'''
import pymel.core as pm

def createNode(*args,**kwargs):
    '''
    一个用于创建maya节点的函数，
    虽然pymel已经提供了创建节点的方法，但是为了保证可修改性在其之上封装一层。
    '''
    if 'p' in kwargs:
        if not isinstance(kwargs['p'],basestring):
            raise ValueError('p(指定父对象标记) 标记输入了错误的参数类型')
        else:
            try:
                kwargs['p']=pm.PyNode(kwargs['p'])
            except pm.MayaNodeError:
                raise ValueError('p(指定父对象标记) 标记输入了一个不存在的对象')
    elif 'parent' in kwargs:
        if not isinstance(kwargs['parent'],basestring):
            raise ValueError('parent(指定父对象标记) 标记输入了错误的参数类型')
        else:
            try:
                kwargs['parent']=pm.PyNode(kwargs['parent'])
            except pm.MayaNodeError:
                raise ValueError('parent(指定父对象标记) 标记输入了一个不存在的对象')
    try:
        return pm.createNode(*args,**kwargs)
    except TypeError:
        raise ValueError('s\shared|ss\skipSelect 应该使用布尔参数')
try:
    #createVar = locals()
    for i in pm.allNodeTypes(ia = False):
        exec(
        'def %s(*args,**kwargs):\n    return createNode(\'%s\',*args,**kwargs)'%(i,i)
        )
        #createVar[i] = functools.partial(createNode,i)
except:
    def AISEnvFacade(*args,**kwargs):
        return createNode('AISEnvFacade',*args,**kwargs)
    def AlembicNode(*args,**kwargs):
        return createNode('AlembicNode',*args,**kwargs)
    def BifMeshImportNode(*args,**kwargs):
        return createNode('BifMeshImportNode',*args,**kwargs)
    def ComputeGlobal(*args,**kwargs):
        return createNode('ComputeGlobal',*args,**kwargs)
    def ComputeLocal(*args,**kwargs):
        return createNode('ComputeLocal',*args,**kwargs)
    def CustomRigDefaultMappingNode(*args,**kwargs):
        return createNode('CustomRigDefaultMappingNode',*args,**kwargs)
    def CustomRigRetargeterNode(*args,**kwargs):
        return createNode('CustomRigRetargeterNode',*args,**kwargs)
    def HIKCharacterNode(*args,**kwargs):
        return createNode('HIKCharacterNode',*args,**kwargs)
    def HIKCharacterStateClient(*args,**kwargs):
        return createNode('HIKCharacterStateClient',*args,**kwargs)
    def HIKControlSetNode(*args,**kwargs):
        return createNode('HIKControlSetNode',*args,**kwargs)
    def HIKEffector2State(*args,**kwargs):
        return createNode('HIKEffector2State',*args,**kwargs)
    def HIKEffectorFromCharacter(*args,**kwargs):
        return createNode('HIKEffectorFromCharacter',*args,**kwargs)
    def HIKFK2State(*args,**kwargs):
        return createNode('HIKFK2State',*args,**kwargs)
    def HIKPinning2State(*args,**kwargs):
        return createNode('HIKPinning2State',*args,**kwargs)
    def HIKProperty2State(*args,**kwargs):
        return createNode('HIKProperty2State',*args,**kwargs)
    def HIKRetargeterNode(*args,**kwargs):
        return createNode('HIKRetargeterNode',*args,**kwargs)
    def HIKSK2State(*args,**kwargs):
        return createNode('HIKSK2State',*args,**kwargs)
    def HIKSkeletonGeneratorNode(*args,**kwargs):
        return createNode('HIKSkeletonGeneratorNode',*args,**kwargs)
    def HIKSolverNode(*args,**kwargs):
        return createNode('HIKSolverNode',*args,**kwargs)
    def HIKState2Effector(*args,**kwargs):
        return createNode('HIKState2Effector',*args,**kwargs)
    def HIKState2FK(*args,**kwargs):
        return createNode('HIKState2FK',*args,**kwargs)
    def HIKState2GlobalSK(*args,**kwargs):
        return createNode('HIKState2GlobalSK',*args,**kwargs)
    def HIKState2SK(*args,**kwargs):
        return createNode('HIKState2SK',*args,**kwargs)
    def MASH_Audio(*args,**kwargs):
        return createNode('MASH_Audio',*args,**kwargs)
    def MASH_BaseNode(*args,**kwargs):
        return createNode('MASH_BaseNode',*args,**kwargs)
    def MASH_Blend(*args,**kwargs):
        return createNode('MASH_Blend',*args,**kwargs)
    def MASH_BlendDeformer(*args,**kwargs):
        return createNode('MASH_BlendDeformer',*args,**kwargs)
    def MASH_Breakout(*args,**kwargs):
        return createNode('MASH_Breakout',*args,**kwargs)
    def MASH_BulletSolver(*args,**kwargs):
        return createNode('MASH_BulletSolver',*args,**kwargs)
    def MASH_ChannelRandom(*args,**kwargs):
        return createNode('MASH_ChannelRandom',*args,**kwargs)
    def MASH_Color(*args,**kwargs):
        return createNode('MASH_Color',*args,**kwargs)
    def MASH_Constraint(*args,**kwargs):
        return createNode('MASH_Constraint',*args,**kwargs)
    def MASH_Curve(*args,**kwargs):
        return createNode('MASH_Curve',*args,**kwargs)
    def MASH_Deformer(*args,**kwargs):
        return createNode('MASH_Deformer',*args,**kwargs)
    def MASH_Delay(*args,**kwargs):
        return createNode('MASH_Delay',*args,**kwargs)
    def MASH_Distribute(*args,**kwargs):
        return createNode('MASH_Distribute',*args,**kwargs)
    def MASH_Dynamics(*args,**kwargs):
        return createNode('MASH_Dynamics',*args,**kwargs)
    def MASH_DynamicsInitialState(*args,**kwargs):
        return createNode('MASH_DynamicsInitialState',*args,**kwargs)
    def MASH_Explode(*args,**kwargs):
        return createNode('MASH_Explode',*args,**kwargs)
    def MASH_Falloff(*args,**kwargs):
        return createNode('MASH_Falloff',*args,**kwargs)
    def MASH_Flight(*args,**kwargs):
        return createNode('MASH_Flight',*args,**kwargs)
    def MASH_Font(*args,**kwargs):
        return createNode('MASH_Font',*args,**kwargs)
    def MASH_Id(*args,**kwargs):
        return createNode('MASH_Id',*args,**kwargs)
    def MASH_Influence(*args,**kwargs):
        return createNode('MASH_Influence',*args,**kwargs)
    def MASH_Inherit(*args,**kwargs):
        return createNode('MASH_Inherit',*args,**kwargs)
    def MASH_InitialState(*args,**kwargs):
        return createNode('MASH_InitialState',*args,**kwargs)
    def MASH_Jiggle(*args,**kwargs):
        return createNode('MASH_Jiggle',*args,**kwargs)
    def MASH_Legacy(*args,**kwargs):
        return createNode('MASH_Legacy',*args,**kwargs)
    def MASH_Maths(*args,**kwargs):
        return createNode('MASH_Maths',*args,**kwargs)
    def MASH_MultiCurve(*args,**kwargs):
        return createNode('MASH_MultiCurve',*args,**kwargs)
    def MASH_Mute(*args,**kwargs):
        return createNode('MASH_Mute',*args,**kwargs)
    def MASH_Noise(*args,**kwargs):
        return createNode('MASH_Noise',*args,**kwargs)
    def MASH_Offset(*args,**kwargs):
        return createNode('MASH_Offset',*args,**kwargs)
    def MASH_Orient(*args,**kwargs):
        return createNode('MASH_Orient',*args,**kwargs)
    def MASH_PfxConnect(*args,**kwargs):
        return createNode('MASH_PfxConnect',*args,**kwargs)
    def MASH_Placer(*args,**kwargs):
        return createNode('MASH_Placer',*args,**kwargs)
    def MASH_PointToCurve(*args,**kwargs):
        return createNode('MASH_PointToCurve',*args,**kwargs)
    def MASH_Points(*args,**kwargs):
        return createNode('MASH_Points',*args,**kwargs)
    def MASH_Python(*args,**kwargs):
        return createNode('MASH_Python',*args,**kwargs)
    def MASH_Random(*args,**kwargs):
        return createNode('MASH_Random',*args,**kwargs)
    def MASH_Replicator(*args,**kwargs):
        return createNode('MASH_Replicator',*args,**kwargs)
    def MASH_Repro(*args,**kwargs):
        return createNode('MASH_Repro',*args,**kwargs)
    def MASH_ShellDeformer(*args,**kwargs):
        return createNode('MASH_ShellDeformer',*args,**kwargs)
    def MASH_Signal(*args,**kwargs):
        return createNode('MASH_Signal',*args,**kwargs)
    def MASH_Spring(*args,**kwargs):
        return createNode('MASH_Spring',*args,**kwargs)
    def MASH_Strength(*args,**kwargs):
        return createNode('MASH_Strength',*args,**kwargs)
    def MASH_Symmetry(*args,**kwargs):
        return createNode('MASH_Symmetry',*args,**kwargs)
    def MASH_Time(*args,**kwargs):
        return createNode('MASH_Time',*args,**kwargs)
    def MASH_Trails(*args,**kwargs):
        return createNode('MASH_Trails',*args,**kwargs)
    def MASH_Transform(*args,**kwargs):
        return createNode('MASH_Transform',*args,**kwargs)
    def MASH_Trig(*args,**kwargs):
        return createNode('MASH_Trig',*args,**kwargs)
    def MASH_Visibility(*args,**kwargs):
        return createNode('MASH_Visibility',*args,**kwargs)
    def MASH_Waiter(*args,**kwargs):
        return createNode('MASH_Waiter',*args,**kwargs)
    def MASH_World(*args,**kwargs):
        return createNode('MASH_World',*args,**kwargs)
    def ShaderfxGameHair(*args,**kwargs):
        return createNode('ShaderfxGameHair',*args,**kwargs)
    def ShaderfxShader(*args,**kwargs):
        return createNode('ShaderfxShader',*args,**kwargs)
    def SphereLocator(*args,**kwargs):
        return createNode('SphereLocator',*args,**kwargs)
    def StingrayPBS(*args,**kwargs):
        return createNode('StingrayPBS',*args,**kwargs)
    def Unfold3DOptimize(*args,**kwargs):
        return createNode('Unfold3DOptimize',*args,**kwargs)
    def Unfold3DUnfold(*args,**kwargs):
        return createNode('Unfold3DUnfold',*args,**kwargs)
    def aboutToSetValueTestNode(*args,**kwargs):
        return createNode('aboutToSetValueTestNode',*args,**kwargs)
    def absOverride(*args,**kwargs):
        return createNode('absOverride',*args,**kwargs)
    def absUniqueOverride(*args,**kwargs):
        return createNode('absUniqueOverride',*args,**kwargs)
    def addDoubleLinear(*args,**kwargs):
        return createNode('addDoubleLinear',*args,**kwargs)
    def addMatrix(*args,**kwargs):
        return createNode('addMatrix',*args,**kwargs)
    def adskMaterial(*args,**kwargs):
        return createNode('adskMaterial',*args,**kwargs)
    def adskPrepareRenderGlobals(*args,**kwargs):
        return createNode('adskPrepareRenderGlobals',*args,**kwargs)
    def aiAOV(*args,**kwargs):
        return createNode('aiAOV',*args,**kwargs)
    def aiAOVDriver(*args,**kwargs):
        return createNode('aiAOVDriver',*args,**kwargs)
    def aiAOVFilter(*args,**kwargs):
        return createNode('aiAOVFilter',*args,**kwargs)
    def aiAbs(*args,**kwargs):
        return createNode('aiAbs',*args,**kwargs)
    def aiAdd(*args,**kwargs):
        return createNode('aiAdd',*args,**kwargs)
    def aiAmbientOcclusion(*args,**kwargs):
        return createNode('aiAmbientOcclusion',*args,**kwargs)
    def aiAreaLight(*args,**kwargs):
        return createNode('aiAreaLight',*args,**kwargs)
    def aiAtan(*args,**kwargs):
        return createNode('aiAtan',*args,**kwargs)
    def aiAtmosphereVolume(*args,**kwargs):
        return createNode('aiAtmosphereVolume',*args,**kwargs)
    def aiBarndoor(*args,**kwargs):
        return createNode('aiBarndoor',*args,**kwargs)
    def aiBlackbody(*args,**kwargs):
        return createNode('aiBlackbody',*args,**kwargs)
    def aiBump2d(*args,**kwargs):
        return createNode('aiBump2d',*args,**kwargs)
    def aiBump3d(*args,**kwargs):
        return createNode('aiBump3d',*args,**kwargs)
    def aiCache(*args,**kwargs):
        return createNode('aiCache',*args,**kwargs)
    def aiClamp(*args,**kwargs):
        return createNode('aiClamp',*args,**kwargs)
    def aiColorConvert(*args,**kwargs):
        return createNode('aiColorConvert',*args,**kwargs)
    def aiColorCorrect(*args,**kwargs):
        return createNode('aiColorCorrect',*args,**kwargs)
    def aiColorJitter(*args,**kwargs):
        return createNode('aiColorJitter',*args,**kwargs)
    def aiColorToFloat(*args,**kwargs):
        return createNode('aiColorToFloat',*args,**kwargs)
    def aiCompare(*args,**kwargs):
        return createNode('aiCompare',*args,**kwargs)
    def aiComplement(*args,**kwargs):
        return createNode('aiComplement',*args,**kwargs)
    def aiComplexIor(*args,**kwargs):
        return createNode('aiComplexIor',*args,**kwargs)
    def aiComposite(*args,**kwargs):
        return createNode('aiComposite',*args,**kwargs)
    def aiCross(*args,**kwargs):
        return createNode('aiCross',*args,**kwargs)
    def aiCurvature(*args,**kwargs):
        return createNode('aiCurvature',*args,**kwargs)
    def aiCurveCollector(*args,**kwargs):
        return createNode('aiCurveCollector',*args,**kwargs)
    def aiDivide(*args,**kwargs):
        return createNode('aiDivide',*args,**kwargs)
    def aiDot(*args,**kwargs):
        return createNode('aiDot',*args,**kwargs)
    def aiExp(*args,**kwargs):
        return createNode('aiExp',*args,**kwargs)
    def aiFacingRatio(*args,**kwargs):
        return createNode('aiFacingRatio',*args,**kwargs)
    def aiFlakes(*args,**kwargs):
        return createNode('aiFlakes',*args,**kwargs)
    def aiFlat(*args,**kwargs):
        return createNode('aiFlat',*args,**kwargs)
    def aiFloatToInt(*args,**kwargs):
        return createNode('aiFloatToInt',*args,**kwargs)
    def aiFog(*args,**kwargs):
        return createNode('aiFog',*args,**kwargs)
    def aiFraction(*args,**kwargs):
        return createNode('aiFraction',*args,**kwargs)
    def aiGobo(*args,**kwargs):
        return createNode('aiGobo',*args,**kwargs)
    def aiHair(*args,**kwargs):
        return createNode('aiHair',*args,**kwargs)
    def aiImage(*args,**kwargs):
        return createNode('aiImage',*args,**kwargs)
    def aiIsFinite(*args,**kwargs):
        return createNode('aiIsFinite',*args,**kwargs)
    def aiLength(*args,**kwargs):
        return createNode('aiLength',*args,**kwargs)
    def aiLightBlocker(*args,**kwargs):
        return createNode('aiLightBlocker',*args,**kwargs)
    def aiLightDecay(*args,**kwargs):
        return createNode('aiLightDecay',*args,**kwargs)
    def aiLightPortal(*args,**kwargs):
        return createNode('aiLightPortal',*args,**kwargs)
    def aiLog(*args,**kwargs):
        return createNode('aiLog',*args,**kwargs)
    def aiMax(*args,**kwargs):
        return createNode('aiMax',*args,**kwargs)
    def aiMeshLight(*args,**kwargs):
        return createNode('aiMeshLight',*args,**kwargs)
    def aiMin(*args,**kwargs):
        return createNode('aiMin',*args,**kwargs)
    def aiMixShader(*args,**kwargs):
        return createNode('aiMixShader',*args,**kwargs)
    def aiModulo(*args,**kwargs):
        return createNode('aiModulo',*args,**kwargs)
    def aiMotionVector(*args,**kwargs):
        return createNode('aiMotionVector',*args,**kwargs)
    def aiMultiply(*args,**kwargs):
        return createNode('aiMultiply',*args,**kwargs)
    def aiNegate(*args,**kwargs):
        return createNode('aiNegate',*args,**kwargs)
    def aiNoise(*args,**kwargs):
        return createNode('aiNoise',*args,**kwargs)
    def aiNormalMap(*args,**kwargs):
        return createNode('aiNormalMap',*args,**kwargs)
    def aiNormalize(*args,**kwargs):
        return createNode('aiNormalize',*args,**kwargs)
    def aiOptions(*args,**kwargs):
        return createNode('aiOptions',*args,**kwargs)
    def aiPhotometricLight(*args,**kwargs):
        return createNode('aiPhotometricLight',*args,**kwargs)
    def aiPhysicalSky(*args,**kwargs):
        return createNode('aiPhysicalSky',*args,**kwargs)
    def aiPow(*args,**kwargs):
        return createNode('aiPow',*args,**kwargs)
    def aiRandom(*args,**kwargs):
        return createNode('aiRandom',*args,**kwargs)
    def aiRange(*args,**kwargs):
        return createNode('aiRange',*args,**kwargs)
    def aiRaySwitch(*args,**kwargs):
        return createNode('aiRaySwitch',*args,**kwargs)
    def aiReciprocal(*args,**kwargs):
        return createNode('aiReciprocal',*args,**kwargs)
    def aiShadowMatte(*args,**kwargs):
        return createNode('aiShadowMatte',*args,**kwargs)
    def aiShuffle(*args,**kwargs):
        return createNode('aiShuffle',*args,**kwargs)
    def aiSign(*args,**kwargs):
        return createNode('aiSign',*args,**kwargs)
    def aiSkin(*args,**kwargs):
        return createNode('aiSkin',*args,**kwargs)
    def aiSky(*args,**kwargs):
        return createNode('aiSky',*args,**kwargs)
    def aiSkyDomeLight(*args,**kwargs):
        return createNode('aiSkyDomeLight',*args,**kwargs)
    def aiSpaceTransform(*args,**kwargs):
        return createNode('aiSpaceTransform',*args,**kwargs)
    def aiSqrt(*args,**kwargs):
        return createNode('aiSqrt',*args,**kwargs)
    def aiStandIn(*args,**kwargs):
        return createNode('aiStandIn',*args,**kwargs)
    def aiStandard(*args,**kwargs):
        return createNode('aiStandard',*args,**kwargs)
    def aiStandardHair(*args,**kwargs):
        return createNode('aiStandardHair',*args,**kwargs)
    def aiStandardSurface(*args,**kwargs):
        return createNode('aiStandardSurface',*args,**kwargs)
    def aiStandardVolume(*args,**kwargs):
        return createNode('aiStandardVolume',*args,**kwargs)
    def aiSubstract(*args,**kwargs):
        return createNode('aiSubstract',*args,**kwargs)
    def aiSwitch(*args,**kwargs):
        return createNode('aiSwitch',*args,**kwargs)
    def aiThinFilm(*args,**kwargs):
        return createNode('aiThinFilm',*args,**kwargs)
    def aiTrigo(*args,**kwargs):
        return createNode('aiTrigo',*args,**kwargs)
    def aiTriplanar(*args,**kwargs):
        return createNode('aiTriplanar',*args,**kwargs)
    def aiTwoSided(*args,**kwargs):
        return createNode('aiTwoSided',*args,**kwargs)
    def aiUserDataBool(*args,**kwargs):
        return createNode('aiUserDataBool',*args,**kwargs)
    def aiUserDataColor(*args,**kwargs):
        return createNode('aiUserDataColor',*args,**kwargs)
    def aiUserDataFloat(*args,**kwargs):
        return createNode('aiUserDataFloat',*args,**kwargs)
    def aiUserDataInt(*args,**kwargs):
        return createNode('aiUserDataInt',*args,**kwargs)
    def aiUserDataString(*args,**kwargs):
        return createNode('aiUserDataString',*args,**kwargs)
    def aiUserDataVec2(*args,**kwargs):
        return createNode('aiUserDataVec2',*args,**kwargs)
    def aiUserDataVector(*args,**kwargs):
        return createNode('aiUserDataVector',*args,**kwargs)
    def aiUtility(*args,**kwargs):
        return createNode('aiUtility',*args,**kwargs)
    def aiUvTransform(*args,**kwargs):
        return createNode('aiUvTransform',*args,**kwargs)
    def aiVectorMap(*args,**kwargs):
        return createNode('aiVectorMap',*args,**kwargs)
    def aiVolume(*args,**kwargs):
        return createNode('aiVolume',*args,**kwargs)
    def aiVolumeCollector(*args,**kwargs):
        return createNode('aiVolumeCollector',*args,**kwargs)
    def aiVolumeSampleFloat(*args,**kwargs):
        return createNode('aiVolumeSampleFloat',*args,**kwargs)
    def aiVolumeSampleRgb(*args,**kwargs):
        return createNode('aiVolumeSampleRgb',*args,**kwargs)
    def aiWireframe(*args,**kwargs):
        return createNode('aiWireframe',*args,**kwargs)
    def aiWriteColor(*args,**kwargs):
        return createNode('aiWriteColor',*args,**kwargs)
    def aiWriteFloat(*args,**kwargs):
        return createNode('aiWriteFloat',*args,**kwargs)
    def aimConstraint(*args,**kwargs):
        return createNode('aimConstraint',*args,**kwargs)
    def airField(*args,**kwargs):
        return createNode('airField',*args,**kwargs)
    def airManip(*args,**kwargs):
        return createNode('airManip',*args,**kwargs)
    def alignCurve(*args,**kwargs):
        return createNode('alignCurve',*args,**kwargs)
    def alignManip(*args,**kwargs):
        return createNode('alignManip',*args,**kwargs)
    def alignSurface(*args,**kwargs):
        return createNode('alignSurface',*args,**kwargs)
    def ambientLight(*args,**kwargs):
        return createNode('ambientLight',*args,**kwargs)
    def angleBetween(*args,**kwargs):
        return createNode('angleBetween',*args,**kwargs)
    def angleDimension(*args,**kwargs):
        return createNode('angleDimension',*args,**kwargs)
    def animBlend(*args,**kwargs):
        return createNode('animBlend',*args,**kwargs)
    def animBlendInOut(*args,**kwargs):
        return createNode('animBlendInOut',*args,**kwargs)
    def animBlendNodeAdditive(*args,**kwargs):
        return createNode('animBlendNodeAdditive',*args,**kwargs)
    def animBlendNodeAdditiveDA(*args,**kwargs):
        return createNode('animBlendNodeAdditiveDA',*args,**kwargs)
    def animBlendNodeAdditiveDL(*args,**kwargs):
        return createNode('animBlendNodeAdditiveDL',*args,**kwargs)
    def animBlendNodeAdditiveF(*args,**kwargs):
        return createNode('animBlendNodeAdditiveF',*args,**kwargs)
    def animBlendNodeAdditiveFA(*args,**kwargs):
        return createNode('animBlendNodeAdditiveFA',*args,**kwargs)
    def animBlendNodeAdditiveFL(*args,**kwargs):
        return createNode('animBlendNodeAdditiveFL',*args,**kwargs)
    def animBlendNodeAdditiveI16(*args,**kwargs):
        return createNode('animBlendNodeAdditiveI16',*args,**kwargs)
    def animBlendNodeAdditiveI32(*args,**kwargs):
        return createNode('animBlendNodeAdditiveI32',*args,**kwargs)
    def animBlendNodeAdditiveRotation(*args,**kwargs):
        return createNode('animBlendNodeAdditiveRotation',*args,**kwargs)
    def animBlendNodeAdditiveScale(*args,**kwargs):
        return createNode('animBlendNodeAdditiveScale',*args,**kwargs)
    def animBlendNodeBoolean(*args,**kwargs):
        return createNode('animBlendNodeBoolean',*args,**kwargs)
    def animBlendNodeEnum(*args,**kwargs):
        return createNode('animBlendNodeEnum',*args,**kwargs)
    def animBlendNodeTime(*args,**kwargs):
        return createNode('animBlendNodeTime',*args,**kwargs)
    def animClip(*args,**kwargs):
        return createNode('animClip',*args,**kwargs)
    def animCurveTA(*args,**kwargs):
        return createNode('animCurveTA',*args,**kwargs)
    def animCurveTL(*args,**kwargs):
        return createNode('animCurveTL',*args,**kwargs)
    def animCurveTT(*args,**kwargs):
        return createNode('animCurveTT',*args,**kwargs)
    def animCurveTU(*args,**kwargs):
        return createNode('animCurveTU',*args,**kwargs)
    def animCurveUA(*args,**kwargs):
        return createNode('animCurveUA',*args,**kwargs)
    def animCurveUL(*args,**kwargs):
        return createNode('animCurveUL',*args,**kwargs)
    def animCurveUT(*args,**kwargs):
        return createNode('animCurveUT',*args,**kwargs)
    def animCurveUU(*args,**kwargs):
        return createNode('animCurveUU',*args,**kwargs)
    def animLayer(*args,**kwargs):
        return createNode('animLayer',*args,**kwargs)
    def anisotropic(*args,**kwargs):
        return createNode('anisotropic',*args,**kwargs)
    def annotationShape(*args,**kwargs):
        return createNode('annotationShape',*args,**kwargs)
    def aovChildCollection(*args,**kwargs):
        return createNode('aovChildCollection',*args,**kwargs)
    def aovCollection(*args,**kwargs):
        return createNode('aovCollection',*args,**kwargs)
    def applyAbs2FloatsOverride(*args,**kwargs):
        return createNode('applyAbs2FloatsOverride',*args,**kwargs)
    def applyAbs3FloatsOverride(*args,**kwargs):
        return createNode('applyAbs3FloatsOverride',*args,**kwargs)
    def applyAbsBoolOverride(*args,**kwargs):
        return createNode('applyAbsBoolOverride',*args,**kwargs)
    def applyAbsEnumOverride(*args,**kwargs):
        return createNode('applyAbsEnumOverride',*args,**kwargs)
    def applyAbsFloatOverride(*args,**kwargs):
        return createNode('applyAbsFloatOverride',*args,**kwargs)
    def applyAbsIntOverride(*args,**kwargs):
        return createNode('applyAbsIntOverride',*args,**kwargs)
    def applyAbsOverride(*args,**kwargs):
        return createNode('applyAbsOverride',*args,**kwargs)
    def applyAbsStringOverride(*args,**kwargs):
        return createNode('applyAbsStringOverride',*args,**kwargs)
    def applyConnectionOverride(*args,**kwargs):
        return createNode('applyConnectionOverride',*args,**kwargs)
    def applyOverride(*args,**kwargs):
        return createNode('applyOverride',*args,**kwargs)
    def applyRel2FloatsOverride(*args,**kwargs):
        return createNode('applyRel2FloatsOverride',*args,**kwargs)
    def applyRel3FloatsOverride(*args,**kwargs):
        return createNode('applyRel3FloatsOverride',*args,**kwargs)
    def applyRelFloatOverride(*args,**kwargs):
        return createNode('applyRelFloatOverride',*args,**kwargs)
    def applyRelIntOverride(*args,**kwargs):
        return createNode('applyRelIntOverride',*args,**kwargs)
    def applyRelOverride(*args,**kwargs):
        return createNode('applyRelOverride',*args,**kwargs)
    def arcLengthDimension(*args,**kwargs):
        return createNode('arcLengthDimension',*args,**kwargs)
    def areaLight(*args,**kwargs):
        return createNode('areaLight',*args,**kwargs)
    def arnoldAOVChildSelector(*args,**kwargs):
        return createNode('arnoldAOVChildSelector',*args,**kwargs)
    def arrayMapper(*args,**kwargs):
        return createNode('arrayMapper',*args,**kwargs)
    def arrowManip(*args,**kwargs):
        return createNode('arrowManip',*args,**kwargs)
    def arubaTessellate(*args,**kwargs):
        return createNode('arubaTessellate',*args,**kwargs)
    def assemblyDefinition(*args,**kwargs):
        return createNode('assemblyDefinition',*args,**kwargs)
    def assemblyReference(*args,**kwargs):
        return createNode('assemblyReference',*args,**kwargs)
    def attachCurve(*args,**kwargs):
        return createNode('attachCurve',*args,**kwargs)
    def attachSurface(*args,**kwargs):
        return createNode('attachSurface',*args,**kwargs)
    def attrHierarchyTest(*args,**kwargs):
        return createNode('attrHierarchyTest',*args,**kwargs)
    def audio(*args,**kwargs):
        return createNode('audio',*args,**kwargs)
    def avgCurves(*args,**kwargs):
        return createNode('avgCurves',*args,**kwargs)
    def avgCurvesManip(*args,**kwargs):
        return createNode('avgCurvesManip',*args,**kwargs)
    def avgNurbsSurfacePoints(*args,**kwargs):
        return createNode('avgNurbsSurfacePoints',*args,**kwargs)
    def avgSurfacePoints(*args,**kwargs):
        return createNode('avgSurfacePoints',*args,**kwargs)
    def axesActionManip(*args,**kwargs):
        return createNode('axesActionManip',*args,**kwargs)
    def ballProjManip(*args,**kwargs):
        return createNode('ballProjManip',*args,**kwargs)
    def barnDoorManip(*args,**kwargs):
        return createNode('barnDoorManip',*args,**kwargs)
    def baseLattice(*args,**kwargs):
        return createNode('baseLattice',*args,**kwargs)
    def basicSelector(*args,**kwargs):
        return createNode('basicSelector',*args,**kwargs)
    def bevel(*args,**kwargs):
        return createNode('bevel',*args,**kwargs)
    def bevelManip(*args,**kwargs):
        return createNode('bevelManip',*args,**kwargs)
    def bevelPlus(*args,**kwargs):
        return createNode('bevelPlus',*args,**kwargs)
    def bezierCurve(*args,**kwargs):
        return createNode('bezierCurve',*args,**kwargs)
    def bezierCurveToNurbs(*args,**kwargs):
        return createNode('bezierCurveToNurbs',*args,**kwargs)
    def bifrostAeroMaterial(*args,**kwargs):
        return createNode('bifrostAeroMaterial',*args,**kwargs)
    def bifrostAttrNotifier(*args,**kwargs):
        return createNode('bifrostAttrNotifier',*args,**kwargs)
    def bifrostContainer(*args,**kwargs):
        return createNode('bifrostContainer',*args,**kwargs)
    def bifrostFoamMaterial(*args,**kwargs):
        return createNode('bifrostFoamMaterial',*args,**kwargs)
    def bifrostLiquidMaterial(*args,**kwargs):
        return createNode('bifrostLiquidMaterial',*args,**kwargs)
    def bifrostShape(*args,**kwargs):
        return createNode('bifrostShape',*args,**kwargs)
    def blendColorSets(*args,**kwargs):
        return createNode('blendColorSets',*args,**kwargs)
    def blendColors(*args,**kwargs):
        return createNode('blendColors',*args,**kwargs)
    def blendDevice(*args,**kwargs):
        return createNode('blendDevice',*args,**kwargs)
    def blendManip(*args,**kwargs):
        return createNode('blendManip',*args,**kwargs)
    def blendShape(*args,**kwargs):
        return createNode('blendShape',*args,**kwargs)
    def blendTwoAttr(*args,**kwargs):
        return createNode('blendTwoAttr',*args,**kwargs)
    def blendWeighted(*args,**kwargs):
        return createNode('blendWeighted',*args,**kwargs)
    def blindDataTemplate(*args,**kwargs):
        return createNode('blindDataTemplate',*args,**kwargs)
    def blinn(*args,**kwargs):
        return createNode('blinn',*args,**kwargs)
    def boneLattice(*args,**kwargs):
        return createNode('boneLattice',*args,**kwargs)
    def boolean(*args,**kwargs):
        return createNode('boolean',*args,**kwargs)
    def boundary(*args,**kwargs):
        return createNode('boundary',*args,**kwargs)
    def brownian(*args,**kwargs):
        return createNode('brownian',*args,**kwargs)
    def brush(*args,**kwargs):
        return createNode('brush',*args,**kwargs)
    def bulge(*args,**kwargs):
        return createNode('bulge',*args,**kwargs)
    def bulletInitialState(*args,**kwargs):
        return createNode('bulletInitialState',*args,**kwargs)
    def bulletRigidBodyConstraintShape(*args,**kwargs):
        return createNode('bulletRigidBodyConstraintShape',*args,**kwargs)
    def bulletRigidBodyShape(*args,**kwargs):
        return createNode('bulletRigidBodyShape',*args,**kwargs)
    def bulletRigidCollection(*args,**kwargs):
        return createNode('bulletRigidCollection',*args,**kwargs)
    def bulletRigidSet(*args,**kwargs):
        return createNode('bulletRigidSet',*args,**kwargs)
    def bulletSoftBodyShape(*args,**kwargs):
        return createNode('bulletSoftBodyShape',*args,**kwargs)
    def bulletSoftConstraintShape(*args,**kwargs):
        return createNode('bulletSoftConstraintShape',*args,**kwargs)
    def bulletSolverShape(*args,**kwargs):
        return createNode('bulletSolverShape',*args,**kwargs)
    def bump2d(*args,**kwargs):
        return createNode('bump2d',*args,**kwargs)
    def bump3d(*args,**kwargs):
        return createNode('bump3d',*args,**kwargs)
    def buttonManip(*args,**kwargs):
        return createNode('buttonManip',*args,**kwargs)
    def cMuscleCreator(*args,**kwargs):
        return createNode('cMuscleCreator',*args,**kwargs)
    def cMuscleDebug(*args,**kwargs):
        return createNode('cMuscleDebug',*args,**kwargs)
    def cMuscleDirection(*args,**kwargs):
        return createNode('cMuscleDirection',*args,**kwargs)
    def cMuscleDisplace(*args,**kwargs):
        return createNode('cMuscleDisplace',*args,**kwargs)
    def cMuscleDisplay(*args,**kwargs):
        return createNode('cMuscleDisplay',*args,**kwargs)
    def cMuscleFalloff(*args,**kwargs):
        return createNode('cMuscleFalloff',*args,**kwargs)
    def cMuscleKeepOut(*args,**kwargs):
        return createNode('cMuscleKeepOut',*args,**kwargs)
    def cMuscleMultiCollide(*args,**kwargs):
        return createNode('cMuscleMultiCollide',*args,**kwargs)
    def cMuscleObject(*args,**kwargs):
        return createNode('cMuscleObject',*args,**kwargs)
    def cMuscleRelative(*args,**kwargs):
        return createNode('cMuscleRelative',*args,**kwargs)
    def cMuscleShader(*args,**kwargs):
        return createNode('cMuscleShader',*args,**kwargs)
    def cMuscleSmartCollide(*args,**kwargs):
        return createNode('cMuscleSmartCollide',*args,**kwargs)
    def cMuscleSmartConstraint(*args,**kwargs):
        return createNode('cMuscleSmartConstraint',*args,**kwargs)
    def cMuscleSpline(*args,**kwargs):
        return createNode('cMuscleSpline',*args,**kwargs)
    def cMuscleSplineDeformer(*args,**kwargs):
        return createNode('cMuscleSplineDeformer',*args,**kwargs)
    def cMuscleStretch(*args,**kwargs):
        return createNode('cMuscleStretch',*args,**kwargs)
    def cMuscleSurfAttach(*args,**kwargs):
        return createNode('cMuscleSurfAttach',*args,**kwargs)
    def cMuscleSystem(*args,**kwargs):
        return createNode('cMuscleSystem',*args,**kwargs)
    def cacheBlend(*args,**kwargs):
        return createNode('cacheBlend',*args,**kwargs)
    def cacheFile(*args,**kwargs):
        return createNode('cacheFile',*args,**kwargs)
    def caddyManip(*args,**kwargs):
        return createNode('caddyManip',*args,**kwargs)
    def caddyManipBase(*args,**kwargs):
        return createNode('caddyManipBase',*args,**kwargs)
    def camera(*args,**kwargs):
        return createNode('camera',*args,**kwargs)
    def cameraManip(*args,**kwargs):
        return createNode('cameraManip',*args,**kwargs)
    def cameraPlaneManip(*args,**kwargs):
        return createNode('cameraPlaneManip',*args,**kwargs)
    def cameraSet(*args,**kwargs):
        return createNode('cameraSet',*args,**kwargs)
    def cameraView(*args,**kwargs):
        return createNode('cameraView',*args,**kwargs)
    def centerManip(*args,**kwargs):
        return createNode('centerManip',*args,**kwargs)
    def channels(*args,**kwargs):
        return createNode('channels',*args,**kwargs)
    def character(*args,**kwargs):
        return createNode('character',*args,**kwargs)
    def characterMap(*args,**kwargs):
        return createNode('characterMap',*args,**kwargs)
    def characterOffset(*args,**kwargs):
        return createNode('characterOffset',*args,**kwargs)
    def checker(*args,**kwargs):
        return createNode('checker',*args,**kwargs)
    def childNode(*args,**kwargs):
        return createNode('childNode',*args,**kwargs)
    def choice(*args,**kwargs):
        return createNode('choice',*args,**kwargs)
    def chooser(*args,**kwargs):
        return createNode('chooser',*args,**kwargs)
    def circleManip(*args,**kwargs):
        return createNode('circleManip',*args,**kwargs)
    def circleSweepManip(*args,**kwargs):
        return createNode('circleSweepManip',*args,**kwargs)
    def clamp(*args,**kwargs):
        return createNode('clamp',*args,**kwargs)
    def clipGhostShape(*args,**kwargs):
        return createNode('clipGhostShape',*args,**kwargs)
    def clipLibrary(*args,**kwargs):
        return createNode('clipLibrary',*args,**kwargs)
    def clipScheduler(*args,**kwargs):
        return createNode('clipScheduler',*args,**kwargs)
    def clipToGhostData(*args,**kwargs):
        return createNode('clipToGhostData',*args,**kwargs)
    def closeCurve(*args,**kwargs):
        return createNode('closeCurve',*args,**kwargs)
    def closeSurface(*args,**kwargs):
        return createNode('closeSurface',*args,**kwargs)
    def closestPointOnMesh(*args,**kwargs):
        return createNode('closestPointOnMesh',*args,**kwargs)
    def closestPointOnSurface(*args,**kwargs):
        return createNode('closestPointOnSurface',*args,**kwargs)
    def cloth(*args,**kwargs):
        return createNode('cloth',*args,**kwargs)
    def cloud(*args,**kwargs):
        return createNode('cloud',*args,**kwargs)
    def cluster(*args,**kwargs):
        return createNode('cluster',*args,**kwargs)
    def clusterFlexorShape(*args,**kwargs):
        return createNode('clusterFlexorShape',*args,**kwargs)
    def clusterHandle(*args,**kwargs):
        return createNode('clusterHandle',*args,**kwargs)
    def coiManip(*args,**kwargs):
        return createNode('coiManip',*args,**kwargs)
    def collection(*args,**kwargs):
        return createNode('collection',*args,**kwargs)
    def collisionModel(*args,**kwargs):
        return createNode('collisionModel',*args,**kwargs)
    def colorComposite(*args,**kwargs):
        return createNode('colorComposite',*args,**kwargs)
    def colorCondition(*args,**kwargs):
        return createNode('colorCondition',*args,**kwargs)
    def colorConstant(*args,**kwargs):
        return createNode('colorConstant',*args,**kwargs)
    def colorCorrect(*args,**kwargs):
        return createNode('colorCorrect',*args,**kwargs)
    def colorLogic(*args,**kwargs):
        return createNode('colorLogic',*args,**kwargs)
    def colorManagementGlobals(*args,**kwargs):
        return createNode('colorManagementGlobals',*args,**kwargs)
    def colorMask(*args,**kwargs):
        return createNode('colorMask',*args,**kwargs)
    def colorMath(*args,**kwargs):
        return createNode('colorMath',*args,**kwargs)
    def colorProfile(*args,**kwargs):
        return createNode('colorProfile',*args,**kwargs)
    def combinationShape(*args,**kwargs):
        return createNode('combinationShape',*args,**kwargs)
    def compactPlugArrayTest(*args,**kwargs):
        return createNode('compactPlugArrayTest',*args,**kwargs)
    def componentManip(*args,**kwargs):
        return createNode('componentManip',*args,**kwargs)
    def composeMatrix(*args,**kwargs):
        return createNode('composeMatrix',*args,**kwargs)
    def concentricProjManip(*args,**kwargs):
        return createNode('concentricProjManip',*args,**kwargs)
    def condition(*args,**kwargs):
        return createNode('condition',*args,**kwargs)
    def connectionOverride(*args,**kwargs):
        return createNode('connectionOverride',*args,**kwargs)
    def connectionUniqueOverride(*args,**kwargs):
        return createNode('connectionUniqueOverride',*args,**kwargs)
    def container(*args,**kwargs):
        return createNode('container',*args,**kwargs)
    def containerBase(*args,**kwargs):
        return createNode('containerBase',*args,**kwargs)
    def contourProjManip(*args,**kwargs):
        return createNode('contourProjManip',*args,**kwargs)
    def contrast(*args,**kwargs):
        return createNode('contrast',*args,**kwargs)
    def controller(*args,**kwargs):
        return createNode('controller',*args,**kwargs)
    def copyColorSet(*args,**kwargs):
        return createNode('copyColorSet',*args,**kwargs)
    def copyUVSet(*args,**kwargs):
        return createNode('copyUVSet',*args,**kwargs)
    def cpManip(*args,**kwargs):
        return createNode('cpManip',*args,**kwargs)
    def crater(*args,**kwargs):
        return createNode('crater',*args,**kwargs)
    def creaseSet(*args,**kwargs):
        return createNode('creaseSet',*args,**kwargs)
    def createBPManip(*args,**kwargs):
        return createNode('createBPManip',*args,**kwargs)
    def createCVManip(*args,**kwargs):
        return createNode('createCVManip',*args,**kwargs)
    def createColorSet(*args,**kwargs):
        return createNode('createColorSet',*args,**kwargs)
    def createEPManip(*args,**kwargs):
        return createNode('createEPManip',*args,**kwargs)
    def createPtexUV(*args,**kwargs):
        return createNode('createPtexUV',*args,**kwargs)
    def createUVSet(*args,**kwargs):
        return createNode('createUVSet',*args,**kwargs)
    def cubeManip(*args,**kwargs):
        return createNode('cubeManip',*args,**kwargs)
    def cubicProjManip(*args,**kwargs):
        return createNode('cubicProjManip',*args,**kwargs)
    def curveEdManip(*args,**kwargs):
        return createNode('curveEdManip',*args,**kwargs)
    def curveFromMeshCoM(*args,**kwargs):
        return createNode('curveFromMeshCoM',*args,**kwargs)
    def curveFromMeshEdge(*args,**kwargs):
        return createNode('curveFromMeshEdge',*args,**kwargs)
    def curveFromSubdivEdge(*args,**kwargs):
        return createNode('curveFromSubdivEdge',*args,**kwargs)
    def curveFromSubdivFace(*args,**kwargs):
        return createNode('curveFromSubdivFace',*args,**kwargs)
    def curveFromSurfaceBnd(*args,**kwargs):
        return createNode('curveFromSurfaceBnd',*args,**kwargs)
    def curveFromSurfaceCoS(*args,**kwargs):
        return createNode('curveFromSurfaceCoS',*args,**kwargs)
    def curveFromSurfaceIso(*args,**kwargs):
        return createNode('curveFromSurfaceIso',*args,**kwargs)
    def curveInfo(*args,**kwargs):
        return createNode('curveInfo',*args,**kwargs)
    def curveIntersect(*args,**kwargs):
        return createNode('curveIntersect',*args,**kwargs)
    def curveNormalizerAngle(*args,**kwargs):
        return createNode('curveNormalizerAngle',*args,**kwargs)
    def curveNormalizerLinear(*args,**kwargs):
        return createNode('curveNormalizerLinear',*args,**kwargs)
    def curveSegmentManip(*args,**kwargs):
        return createNode('curveSegmentManip',*args,**kwargs)
    def curveVarGroup(*args,**kwargs):
        return createNode('curveVarGroup',*args,**kwargs)
    def curveWarp(*args,**kwargs):
        return createNode('curveWarp',*args,**kwargs)
    def cylindricalProjManip(*args,**kwargs):
        return createNode('cylindricalProjManip',*args,**kwargs)
    def dagContainer(*args,**kwargs):
        return createNode('dagContainer',*args,**kwargs)
    def dagPose(*args,**kwargs):
        return createNode('dagPose',*args,**kwargs)
    def dataBlockTest(*args,**kwargs):
        return createNode('dataBlockTest',*args,**kwargs)
    def decomposeMatrix(*args,**kwargs):
        return createNode('decomposeMatrix',*args,**kwargs)
    def defaultLightList(*args,**kwargs):
        return createNode('defaultLightList',*args,**kwargs)
    def defaultRenderUtilityList(*args,**kwargs):
        return createNode('defaultRenderUtilityList',*args,**kwargs)
    def defaultRenderingList(*args,**kwargs):
        return createNode('defaultRenderingList',*args,**kwargs)
    def defaultShaderList(*args,**kwargs):
        return createNode('defaultShaderList',*args,**kwargs)
    def defaultTextureList(*args,**kwargs):
        return createNode('defaultTextureList',*args,**kwargs)
    def deformBend(*args,**kwargs):
        return createNode('deformBend',*args,**kwargs)
    def deformBendManip(*args,**kwargs):
        return createNode('deformBendManip',*args,**kwargs)
    def deformFlare(*args,**kwargs):
        return createNode('deformFlare',*args,**kwargs)
    def deformFlareManip(*args,**kwargs):
        return createNode('deformFlareManip',*args,**kwargs)
    def deformSine(*args,**kwargs):
        return createNode('deformSine',*args,**kwargs)
    def deformSineManip(*args,**kwargs):
        return createNode('deformSineManip',*args,**kwargs)
    def deformSquash(*args,**kwargs):
        return createNode('deformSquash',*args,**kwargs)
    def deformSquashManip(*args,**kwargs):
        return createNode('deformSquashManip',*args,**kwargs)
    def deformTwist(*args,**kwargs):
        return createNode('deformTwist',*args,**kwargs)
    def deformTwistManip(*args,**kwargs):
        return createNode('deformTwistManip',*args,**kwargs)
    def deformWave(*args,**kwargs):
        return createNode('deformWave',*args,**kwargs)
    def deformWaveManip(*args,**kwargs):
        return createNode('deformWaveManip',*args,**kwargs)
    def deleteColorSet(*args,**kwargs):
        return createNode('deleteColorSet',*args,**kwargs)
    def deleteComponent(*args,**kwargs):
        return createNode('deleteComponent',*args,**kwargs)
    def deleteUVSet(*args,**kwargs):
        return createNode('deleteUVSet',*args,**kwargs)
    def deltaMush(*args,**kwargs):
        return createNode('deltaMush',*args,**kwargs)
    def detachCurve(*args,**kwargs):
        return createNode('detachCurve',*args,**kwargs)
    def detachSurface(*args,**kwargs):
        return createNode('detachSurface',*args,**kwargs)
    def directedDisc(*args,**kwargs):
        return createNode('directedDisc',*args,**kwargs)
    def directionManip(*args,**kwargs):
        return createNode('directionManip',*args,**kwargs)
    def directionalLight(*args,**kwargs):
        return createNode('directionalLight',*args,**kwargs)
    def discManip(*args,**kwargs):
        return createNode('discManip',*args,**kwargs)
    def diskCache(*args,**kwargs):
        return createNode('diskCache',*args,**kwargs)
    def displacementShader(*args,**kwargs):
        return createNode('displacementShader',*args,**kwargs)
    def displayLayer(*args,**kwargs):
        return createNode('displayLayer',*args,**kwargs)
    def displayLayerManager(*args,**kwargs):
        return createNode('displayLayerManager',*args,**kwargs)
    def displayPoints(*args,**kwargs):
        return createNode('displayPoints',*args,**kwargs)
    def distanceBetween(*args,**kwargs):
        return createNode('distanceBetween',*args,**kwargs)
    def distanceDimShape(*args,**kwargs):
        return createNode('distanceDimShape',*args,**kwargs)
    def distanceManip(*args,**kwargs):
        return createNode('distanceManip',*args,**kwargs)
    def dof(*args,**kwargs):
        return createNode('dof',*args,**kwargs)
    def dofManip(*args,**kwargs):
        return createNode('dofManip',*args,**kwargs)
    def doubleShadingSwitch(*args,**kwargs):
        return createNode('doubleShadingSwitch',*args,**kwargs)
    def dpBirailSrf(*args,**kwargs):
        return createNode('dpBirailSrf',*args,**kwargs)
    def dragField(*args,**kwargs):
        return createNode('dragField',*args,**kwargs)
    def dropoffLocator(*args,**kwargs):
        return createNode('dropoffLocator',*args,**kwargs)
    def dropoffManip(*args,**kwargs):
        return createNode('dropoffManip',*args,**kwargs)
    def dynAttenuationManip(*args,**kwargs):
        return createNode('dynAttenuationManip',*args,**kwargs)
    def dynController(*args,**kwargs):
        return createNode('dynController',*args,**kwargs)
    def dynGlobals(*args,**kwargs):
        return createNode('dynGlobals',*args,**kwargs)
    def dynHolder(*args,**kwargs):
        return createNode('dynHolder',*args,**kwargs)
    def dynSpreadManip(*args,**kwargs):
        return createNode('dynSpreadManip',*args,**kwargs)
    def dynamicConstraint(*args,**kwargs):
        return createNode('dynamicConstraint',*args,**kwargs)
    def editMetadata(*args,**kwargs):
        return createNode('editMetadata',*args,**kwargs)
    def editsManager(*args,**kwargs):
        return createNode('editsManager',*args,**kwargs)
    def emitterManip(*args,**kwargs):
        return createNode('emitterManip',*args,**kwargs)
    def enableManip(*args,**kwargs):
        return createNode('enableManip',*args,**kwargs)
    def envBall(*args,**kwargs):
        return createNode('envBall',*args,**kwargs)
    def envChrome(*args,**kwargs):
        return createNode('envChrome',*args,**kwargs)
    def envCube(*args,**kwargs):
        return createNode('envCube',*args,**kwargs)
    def envFacade(*args,**kwargs):
        return createNode('envFacade',*args,**kwargs)
    def envFog(*args,**kwargs):
        return createNode('envFog',*args,**kwargs)
    def envSky(*args,**kwargs):
        return createNode('envSky',*args,**kwargs)
    def envSphere(*args,**kwargs):
        return createNode('envSphere',*args,**kwargs)
    def environmentFog(*args,**kwargs):
        return createNode('environmentFog',*args,**kwargs)
    def eulerToQuat(*args,**kwargs):
        return createNode('eulerToQuat',*args,**kwargs)
    def explodeNurbsShell(*args,**kwargs):
        return createNode('explodeNurbsShell',*args,**kwargs)
    def expression(*args,**kwargs):
        return createNode('expression',*args,**kwargs)
    def extendCurve(*args,**kwargs):
        return createNode('extendCurve',*args,**kwargs)
    def extendCurveDistanceManip(*args,**kwargs):
        return createNode('extendCurveDistanceManip',*args,**kwargs)
    def extendSurface(*args,**kwargs):
        return createNode('extendSurface',*args,**kwargs)
    def extendSurfaceDistanceManip(*args,**kwargs):
        return createNode('extendSurfaceDistanceManip',*args,**kwargs)
    def extrude(*args,**kwargs):
        return createNode('extrude',*args,**kwargs)
    def extrudeManip(*args,**kwargs):
        return createNode('extrudeManip',*args,**kwargs)
    def facade(*args,**kwargs):
        return createNode('facade',*args,**kwargs)
    def ffBlendSrf(*args,**kwargs):
        return createNode('ffBlendSrf',*args,**kwargs)
    def ffBlendSrfObsolete(*args,**kwargs):
        return createNode('ffBlendSrfObsolete',*args,**kwargs)
    def ffFilletSrf(*args,**kwargs):
        return createNode('ffFilletSrf',*args,**kwargs)
    def ffd(*args,**kwargs):
        return createNode('ffd',*args,**kwargs)
    def fieldManip(*args,**kwargs):
        return createNode('fieldManip',*args,**kwargs)
    def fieldsManip(*args,**kwargs):
        return createNode('fieldsManip',*args,**kwargs)
    def file(*args,**kwargs):
        return createNode('file',*args,**kwargs)
    def filletCurve(*args,**kwargs):
        return createNode('filletCurve',*args,**kwargs)
    def fitBspline(*args,**kwargs):
        return createNode('fitBspline',*args,**kwargs)
    def flexorShape(*args,**kwargs):
        return createNode('flexorShape',*args,**kwargs)
    def floatComposite(*args,**kwargs):
        return createNode('floatComposite',*args,**kwargs)
    def floatCondition(*args,**kwargs):
        return createNode('floatCondition',*args,**kwargs)
    def floatConstant(*args,**kwargs):
        return createNode('floatConstant',*args,**kwargs)
    def floatCorrect(*args,**kwargs):
        return createNode('floatCorrect',*args,**kwargs)
    def floatLogic(*args,**kwargs):
        return createNode('floatLogic',*args,**kwargs)
    def floatMask(*args,**kwargs):
        return createNode('floatMask',*args,**kwargs)
    def floatMath(*args,**kwargs):
        return createNode('floatMath',*args,**kwargs)
    def flow(*args,**kwargs):
        return createNode('flow',*args,**kwargs)
    def fluidEmitter(*args,**kwargs):
        return createNode('fluidEmitter',*args,**kwargs)
    def fluidShape(*args,**kwargs):
        return createNode('fluidShape',*args,**kwargs)
    def fluidSliceManip(*args,**kwargs):
        return createNode('fluidSliceManip',*args,**kwargs)
    def fluidTexture2D(*args,**kwargs):
        return createNode('fluidTexture2D',*args,**kwargs)
    def fluidTexture3D(*args,**kwargs):
        return createNode('fluidTexture3D',*args,**kwargs)
    def follicle(*args,**kwargs):
        return createNode('follicle',*args,**kwargs)
    def forceUpdateManip(*args,**kwargs):
        return createNode('forceUpdateManip',*args,**kwargs)
    def fosterParent(*args,**kwargs):
        return createNode('fosterParent',*args,**kwargs)
    def fourByFourMatrix(*args,**kwargs):
        return createNode('fourByFourMatrix',*args,**kwargs)
    def fractal(*args,**kwargs):
        return createNode('fractal',*args,**kwargs)
    def frameCache(*args,**kwargs):
        return createNode('frameCache',*args,**kwargs)
    def freePointManip(*args,**kwargs):
        return createNode('freePointManip',*args,**kwargs)
    def freePointTriadManip(*args,**kwargs):
        return createNode('freePointTriadManip',*args,**kwargs)
    def gameFbxExporter(*args,**kwargs):
        return createNode('gameFbxExporter',*args,**kwargs)
    def gammaCorrect(*args,**kwargs):
        return createNode('gammaCorrect',*args,**kwargs)
    def geoConnectable(*args,**kwargs):
        return createNode('geoConnectable',*args,**kwargs)
    def geoConnector(*args,**kwargs):
        return createNode('geoConnector',*args,**kwargs)
    def geomBind(*args,**kwargs):
        return createNode('geomBind',*args,**kwargs)
    def geometryConstraint(*args,**kwargs):
        return createNode('geometryConstraint',*args,**kwargs)
    def geometryFilter(*args,**kwargs):
        return createNode('geometryFilter',*args,**kwargs)
    def geometryOnLineManip(*args,**kwargs):
        return createNode('geometryOnLineManip',*args,**kwargs)
    def geometryVarGroup(*args,**kwargs):
        return createNode('geometryVarGroup',*args,**kwargs)
    def globalCacheControl(*args,**kwargs):
        return createNode('globalCacheControl',*args,**kwargs)
    def globalStitch(*args,**kwargs):
        return createNode('globalStitch',*args,**kwargs)
    def gpuCache(*args,**kwargs):
        return createNode('gpuCache',*args,**kwargs)
    def granite(*args,**kwargs):
        return createNode('granite',*args,**kwargs)
    def gravityField(*args,**kwargs):
        return createNode('gravityField',*args,**kwargs)
    def greasePencilSequence(*args,**kwargs):
        return createNode('greasePencilSequence',*args,**kwargs)
    def greasePlane(*args,**kwargs):
        return createNode('greasePlane',*args,**kwargs)
    def greasePlaneRenderShape(*args,**kwargs):
        return createNode('greasePlaneRenderShape',*args,**kwargs)
    def grid(*args,**kwargs):
        return createNode('grid',*args,**kwargs)
    def groupId(*args,**kwargs):
        return createNode('groupId',*args,**kwargs)
    def groupParts(*args,**kwargs):
        return createNode('groupParts',*args,**kwargs)
    def guide(*args,**kwargs):
        return createNode('guide',*args,**kwargs)
    def hairConstraint(*args,**kwargs):
        return createNode('hairConstraint',*args,**kwargs)
    def hairPhysicalShader(*args,**kwargs):
        return createNode('hairPhysicalShader',*args,**kwargs)
    def hairSystem(*args,**kwargs):
        return createNode('hairSystem',*args,**kwargs)
    def hairTubeShader(*args,**kwargs):
        return createNode('hairTubeShader',*args,**kwargs)
    def hardenPoint(*args,**kwargs):
        return createNode('hardenPoint',*args,**kwargs)
    def hardwareRenderGlobals(*args,**kwargs):
        return createNode('hardwareRenderGlobals',*args,**kwargs)
    def hardwareRenderingGlobals(*args,**kwargs):
        return createNode('hardwareRenderingGlobals',*args,**kwargs)
    def heightField(*args,**kwargs):
        return createNode('heightField',*args,**kwargs)
    def hierarchyTestNode1(*args,**kwargs):
        return createNode('hierarchyTestNode1',*args,**kwargs)
    def hierarchyTestNode2(*args,**kwargs):
        return createNode('hierarchyTestNode2',*args,**kwargs)
    def hierarchyTestNode3(*args,**kwargs):
        return createNode('hierarchyTestNode3',*args,**kwargs)
    def hikEffector(*args,**kwargs):
        return createNode('hikEffector',*args,**kwargs)
    def hikFKJoint(*args,**kwargs):
        return createNode('hikFKJoint',*args,**kwargs)
    def hikFloorContactMarker(*args,**kwargs):
        return createNode('hikFloorContactMarker',*args,**kwargs)
    def hikGroundPlane(*args,**kwargs):
        return createNode('hikGroundPlane',*args,**kwargs)
    def hikHandle(*args,**kwargs):
        return createNode('hikHandle',*args,**kwargs)
    def hikIKEffector(*args,**kwargs):
        return createNode('hikIKEffector',*args,**kwargs)
    def hikSolver(*args,**kwargs):
        return createNode('hikSolver',*args,**kwargs)
    def historySwitch(*args,**kwargs):
        return createNode('historySwitch',*args,**kwargs)
    def holdMatrix(*args,**kwargs):
        return createNode('holdMatrix',*args,**kwargs)
    def hsvToRgb(*args,**kwargs):
        return createNode('hsvToRgb',*args,**kwargs)
    def hwReflectionMap(*args,**kwargs):
        return createNode('hwReflectionMap',*args,**kwargs)
    def hwRenderGlobals(*args,**kwargs):
        return createNode('hwRenderGlobals',*args,**kwargs)
    def hyperGraphInfo(*args,**kwargs):
        return createNode('hyperGraphInfo',*args,**kwargs)
    def hyperLayout(*args,**kwargs):
        return createNode('hyperLayout',*args,**kwargs)
    def hyperView(*args,**kwargs):
        return createNode('hyperView',*args,**kwargs)
    def igBrushManip(*args,**kwargs):
        return createNode('igBrushManip',*args,**kwargs)
    def igmDescription(*args,**kwargs):
        return createNode('igmDescription',*args,**kwargs)
    def ik2Bsolver(*args,**kwargs):
        return createNode('ik2Bsolver',*args,**kwargs)
    def ikEffector(*args,**kwargs):
        return createNode('ikEffector',*args,**kwargs)
    def ikHandle(*args,**kwargs):
        return createNode('ikHandle',*args,**kwargs)
    def ikMCsolver(*args,**kwargs):
        return createNode('ikMCsolver',*args,**kwargs)
    def ikPASolver(*args,**kwargs):
        return createNode('ikPASolver',*args,**kwargs)
    def ikRPManip(*args,**kwargs):
        return createNode('ikRPManip',*args,**kwargs)
    def ikRPsolver(*args,**kwargs):
        return createNode('ikRPsolver',*args,**kwargs)
    def ikSCsolver(*args,**kwargs):
        return createNode('ikSCsolver',*args,**kwargs)
    def ikSplineManip(*args,**kwargs):
        return createNode('ikSplineManip',*args,**kwargs)
    def ikSplineSolver(*args,**kwargs):
        return createNode('ikSplineSolver',*args,**kwargs)
    def ikSpringSolver(*args,**kwargs):
        return createNode('ikSpringSolver',*args,**kwargs)
    def ikSystem(*args,**kwargs):
        return createNode('ikSystem',*args,**kwargs)
    def imagePlane(*args,**kwargs):
        return createNode('imagePlane',*args,**kwargs)
    def implicitBox(*args,**kwargs):
        return createNode('implicitBox',*args,**kwargs)
    def implicitCone(*args,**kwargs):
        return createNode('implicitCone',*args,**kwargs)
    def implicitSphere(*args,**kwargs):
        return createNode('implicitSphere',*args,**kwargs)
    def indexManip(*args,**kwargs):
        return createNode('indexManip',*args,**kwargs)
    def insertKnotCurve(*args,**kwargs):
        return createNode('insertKnotCurve',*args,**kwargs)
    def insertKnotSurface(*args,**kwargs):
        return createNode('insertKnotSurface',*args,**kwargs)
    def instancer(*args,**kwargs):
        return createNode('instancer',*args,**kwargs)
    def intersectSurface(*args,**kwargs):
        return createNode('intersectSurface',*args,**kwargs)
    def inverseMatrix(*args,**kwargs):
        return createNode('inverseMatrix',*args,**kwargs)
    def isoparmManip(*args,**kwargs):
        return createNode('isoparmManip',*args,**kwargs)
    def jiggle(*args,**kwargs):
        return createNode('jiggle',*args,**kwargs)
    def joint(*args,**kwargs):
        return createNode('joint',*args,**kwargs)
    def jointCluster(*args,**kwargs):
        return createNode('jointCluster',*args,**kwargs)
    def jointClusterManip(*args,**kwargs):
        return createNode('jointClusterManip',*args,**kwargs)
    def jointFfd(*args,**kwargs):
        return createNode('jointFfd',*args,**kwargs)
    def jointLattice(*args,**kwargs):
        return createNode('jointLattice',*args,**kwargs)
    def jointTranslateManip(*args,**kwargs):
        return createNode('jointTranslateManip',*args,**kwargs)
    def keyframeRegionManip(*args,**kwargs):
        return createNode('keyframeRegionManip',*args,**kwargs)
    def keyingGroup(*args,**kwargs):
        return createNode('keyingGroup',*args,**kwargs)
    def lambert(*args,**kwargs):
        return createNode('lambert',*args,**kwargs)
    def lattice(*args,**kwargs):
        return createNode('lattice',*args,**kwargs)
    def layeredShader(*args,**kwargs):
        return createNode('layeredShader',*args,**kwargs)
    def layeredTexture(*args,**kwargs):
        return createNode('layeredTexture',*args,**kwargs)
    def leastSquaresModifier(*args,**kwargs):
        return createNode('leastSquaresModifier',*args,**kwargs)
    def leather(*args,**kwargs):
        return createNode('leather',*args,**kwargs)
    def lightEditor(*args,**kwargs):
        return createNode('lightEditor',*args,**kwargs)
    def lightFog(*args,**kwargs):
        return createNode('lightFog',*args,**kwargs)
    def lightGroup(*args,**kwargs):
        return createNode('lightGroup',*args,**kwargs)
    def lightInfo(*args,**kwargs):
        return createNode('lightInfo',*args,**kwargs)
    def lightItem(*args,**kwargs):
        return createNode('lightItem',*args,**kwargs)
    def lightItemBase(*args,**kwargs):
        return createNode('lightItemBase',*args,**kwargs)
    def lightLinker(*args,**kwargs):
        return createNode('lightLinker',*args,**kwargs)
    def lightList(*args,**kwargs):
        return createNode('lightList',*args,**kwargs)
    def lightManip(*args,**kwargs):
        return createNode('lightManip',*args,**kwargs)
    def lightsChildCollection(*args,**kwargs):
        return createNode('lightsChildCollection',*args,**kwargs)
    def lightsCollection(*args,**kwargs):
        return createNode('lightsCollection',*args,**kwargs)
    def lightsCollectionSelector(*args,**kwargs):
        return createNode('lightsCollectionSelector',*args,**kwargs)
    def limitManip(*args,**kwargs):
        return createNode('limitManip',*args,**kwargs)
    def lineManip(*args,**kwargs):
        return createNode('lineManip',*args,**kwargs)
    def lineModifier(*args,**kwargs):
        return createNode('lineModifier',*args,**kwargs)
    def listItem(*args,**kwargs):
        return createNode('listItem',*args,**kwargs)
    def locator(*args,**kwargs):
        return createNode('locator',*args,**kwargs)
    def lodGroup(*args,**kwargs):
        return createNode('lodGroup',*args,**kwargs)
    def lodThresholds(*args,**kwargs):
        return createNode('lodThresholds',*args,**kwargs)
    def loft(*args,**kwargs):
        return createNode('loft',*args,**kwargs)
    def lookAt(*args,**kwargs):
        return createNode('lookAt',*args,**kwargs)
    def luminance(*args,**kwargs):
        return createNode('luminance',*args,**kwargs)
    def makeGroup(*args,**kwargs):
        return createNode('makeGroup',*args,**kwargs)
    def makeIllustratorCurves(*args,**kwargs):
        return createNode('makeIllustratorCurves',*args,**kwargs)
    def makeNurbCircle(*args,**kwargs):
        return createNode('makeNurbCircle',*args,**kwargs)
    def makeNurbCone(*args,**kwargs):
        return createNode('makeNurbCone',*args,**kwargs)
    def makeNurbCube(*args,**kwargs):
        return createNode('makeNurbCube',*args,**kwargs)
    def makeNurbCylinder(*args,**kwargs):
        return createNode('makeNurbCylinder',*args,**kwargs)
    def makeNurbPlane(*args,**kwargs):
        return createNode('makeNurbPlane',*args,**kwargs)
    def makeNurbSphere(*args,**kwargs):
        return createNode('makeNurbSphere',*args,**kwargs)
    def makeNurbTorus(*args,**kwargs):
        return createNode('makeNurbTorus',*args,**kwargs)
    def makeNurbsSquare(*args,**kwargs):
        return createNode('makeNurbsSquare',*args,**kwargs)
    def makeTextCurves(*args,**kwargs):
        return createNode('makeTextCurves',*args,**kwargs)
    def makeThreePointCircularArc(*args,**kwargs):
        return createNode('makeThreePointCircularArc',*args,**kwargs)
    def makeThreePointCircularArcManip(*args,**kwargs):
        return createNode('makeThreePointCircularArcManip',*args,**kwargs)
    def makeTwoPointCircularArc(*args,**kwargs):
        return createNode('makeTwoPointCircularArc',*args,**kwargs)
    def makeTwoPointCircularArcManip(*args,**kwargs):
        return createNode('makeTwoPointCircularArcManip',*args,**kwargs)
    def mandelbrot(*args,**kwargs):
        return createNode('mandelbrot',*args,**kwargs)
    def mandelbrot3D(*args,**kwargs):
        return createNode('mandelbrot3D',*args,**kwargs)
    def manip2DContainer(*args,**kwargs):
        return createNode('manip2DContainer',*args,**kwargs)
    def manipContainer(*args,**kwargs):
        return createNode('manipContainer',*args,**kwargs)
    def marble(*args,**kwargs):
        return createNode('marble',*args,**kwargs)
    def markerManip(*args,**kwargs):
        return createNode('markerManip',*args,**kwargs)
    def materialFacade(*args,**kwargs):
        return createNode('materialFacade',*args,**kwargs)
    def materialInfo(*args,**kwargs):
        return createNode('materialInfo',*args,**kwargs)
    def materialOverride(*args,**kwargs):
        return createNode('materialOverride',*args,**kwargs)
    def membrane(*args,**kwargs):
        return createNode('membrane',*args,**kwargs)
    def mesh(*args,**kwargs):
        return createNode('mesh',*args,**kwargs)
    def meshVarGroup(*args,**kwargs):
        return createNode('meshVarGroup',*args,**kwargs)
    def motionPath(*args,**kwargs):
        return createNode('motionPath',*args,**kwargs)
    def motionPathManip(*args,**kwargs):
        return createNode('motionPathManip',*args,**kwargs)
    def motionTrail(*args,**kwargs):
        return createNode('motionTrail',*args,**kwargs)
    def motionTrailShape(*args,**kwargs):
        return createNode('motionTrailShape',*args,**kwargs)
    def mountain(*args,**kwargs):
        return createNode('mountain',*args,**kwargs)
    def moveBezierHandleManip(*args,**kwargs):
        return createNode('moveBezierHandleManip',*args,**kwargs)
    def moveVertexManip(*args,**kwargs):
        return createNode('moveVertexManip',*args,**kwargs)
    def movie(*args,**kwargs):
        return createNode('movie',*args,**kwargs)
    def mpBirailSrf(*args,**kwargs):
        return createNode('mpBirailSrf',*args,**kwargs)
    def multDoubleLinear(*args,**kwargs):
        return createNode('multDoubleLinear',*args,**kwargs)
    def multMatrix(*args,**kwargs):
        return createNode('multMatrix',*args,**kwargs)
    def multilisterLight(*args,**kwargs):
        return createNode('multilisterLight',*args,**kwargs)
    def multiplyDivide(*args,**kwargs):
        return createNode('multiplyDivide',*args,**kwargs)
    def mute(*args,**kwargs):
        return createNode('mute',*args,**kwargs)
    def nCloth(*args,**kwargs):
        return createNode('nCloth',*args,**kwargs)
    def nComponent(*args,**kwargs):
        return createNode('nComponent',*args,**kwargs)
    def nParticle(*args,**kwargs):
        return createNode('nParticle',*args,**kwargs)
    def nRigid(*args,**kwargs):
        return createNode('nRigid',*args,**kwargs)
    def nearestPointOnCurve(*args,**kwargs):
        return createNode('nearestPointOnCurve',*args,**kwargs)
    def network(*args,**kwargs):
        return createNode('network',*args,**kwargs)
    def newtonField(*args,**kwargs):
        return createNode('newtonField',*args,**kwargs)
    def newtonManip(*args,**kwargs):
        return createNode('newtonManip',*args,**kwargs)
    def nexManip(*args,**kwargs):
        return createNode('nexManip',*args,**kwargs)
    def nodeGraphEditorBookmarkInfo(*args,**kwargs):
        return createNode('nodeGraphEditorBookmarkInfo',*args,**kwargs)
    def nodeGraphEditorBookmarks(*args,**kwargs):
        return createNode('nodeGraphEditorBookmarks',*args,**kwargs)
    def nodeGraphEditorInfo(*args,**kwargs):
        return createNode('nodeGraphEditorInfo',*args,**kwargs)
    def noise(*args,**kwargs):
        return createNode('noise',*args,**kwargs)
    def nonLinear(*args,**kwargs):
        return createNode('nonLinear',*args,**kwargs)
    def normalConstraint(*args,**kwargs):
        return createNode('normalConstraint',*args,**kwargs)
    def nucleus(*args,**kwargs):
        return createNode('nucleus',*args,**kwargs)
    def nurbsCurve(*args,**kwargs):
        return createNode('nurbsCurve',*args,**kwargs)
    def nurbsCurveToBezier(*args,**kwargs):
        return createNode('nurbsCurveToBezier',*args,**kwargs)
    def nurbsSurface(*args,**kwargs):
        return createNode('nurbsSurface',*args,**kwargs)
    def nurbsTessellate(*args,**kwargs):
        return createNode('nurbsTessellate',*args,**kwargs)
    def nurbsToSubdiv(*args,**kwargs):
        return createNode('nurbsToSubdiv',*args,**kwargs)
    def nurbsToSubdivProc(*args,**kwargs):
        return createNode('nurbsToSubdivProc',*args,**kwargs)
    def objectAttrFilter(*args,**kwargs):
        return createNode('objectAttrFilter',*args,**kwargs)
    def objectBinFilter(*args,**kwargs):
        return createNode('objectBinFilter',*args,**kwargs)
    def objectFilter(*args,**kwargs):
        return createNode('objectFilter',*args,**kwargs)
    def objectGrpToComp(*args,**kwargs):
        return createNode('objectGrpToComp',*args,**kwargs)
    def objectMultiFilter(*args,**kwargs):
        return createNode('objectMultiFilter',*args,**kwargs)
    def objectNameFilter(*args,**kwargs):
        return createNode('objectNameFilter',*args,**kwargs)
    def objectRenderFilter(*args,**kwargs):
        return createNode('objectRenderFilter',*args,**kwargs)
    def objectScriptFilter(*args,**kwargs):
        return createNode('objectScriptFilter',*args,**kwargs)
    def objectSet(*args,**kwargs):
        return createNode('objectSet',*args,**kwargs)
    def objectTypeFilter(*args,**kwargs):
        return createNode('objectTypeFilter',*args,**kwargs)
    def ocean(*args,**kwargs):
        return createNode('ocean',*args,**kwargs)
    def oceanShader(*args,**kwargs):
        return createNode('oceanShader',*args,**kwargs)
    def offsetCos(*args,**kwargs):
        return createNode('offsetCos',*args,**kwargs)
    def offsetCosManip(*args,**kwargs):
        return createNode('offsetCosManip',*args,**kwargs)
    def offsetCurve(*args,**kwargs):
        return createNode('offsetCurve',*args,**kwargs)
    def offsetCurveManip(*args,**kwargs):
        return createNode('offsetCurveManip',*args,**kwargs)
    def offsetDeformer(*args,**kwargs):
        return createNode('offsetDeformer',*args,**kwargs)
    def offsetSurface(*args,**kwargs):
        return createNode('offsetSurface',*args,**kwargs)
    def offsetSurfaceManip(*args,**kwargs):
        return createNode('offsetSurfaceManip',*args,**kwargs)
    def oldBlindDataBase(*args,**kwargs):
        return createNode('oldBlindDataBase',*args,**kwargs)
    def oldGeometryConstraint(*args,**kwargs):
        return createNode('oldGeometryConstraint',*args,**kwargs)
    def oldNormalConstraint(*args,**kwargs):
        return createNode('oldNormalConstraint',*args,**kwargs)
    def oldTangentConstraint(*args,**kwargs):
        return createNode('oldTangentConstraint',*args,**kwargs)
    def opticalFX(*args,**kwargs):
        return createNode('opticalFX',*args,**kwargs)
    def orientConstraint(*args,**kwargs):
        return createNode('orientConstraint',*args,**kwargs)
    def orientationMarker(*args,**kwargs):
        return createNode('orientationMarker',*args,**kwargs)
    def override(*args,**kwargs):
        return createNode('override',*args,**kwargs)
    def pairBlend(*args,**kwargs):
        return createNode('pairBlend',*args,**kwargs)
    def paramDimension(*args,**kwargs):
        return createNode('paramDimension',*args,**kwargs)
    def parentConstraint(*args,**kwargs):
        return createNode('parentConstraint',*args,**kwargs)
    def particle(*args,**kwargs):
        return createNode('particle',*args,**kwargs)
    def particleAgeMapper(*args,**kwargs):
        return createNode('particleAgeMapper',*args,**kwargs)
    def particleCloud(*args,**kwargs):
        return createNode('particleCloud',*args,**kwargs)
    def particleColorMapper(*args,**kwargs):
        return createNode('particleColorMapper',*args,**kwargs)
    def particleIncandMapper(*args,**kwargs):
        return createNode('particleIncandMapper',*args,**kwargs)
    def particleSamplerInfo(*args,**kwargs):
        return createNode('particleSamplerInfo',*args,**kwargs)
    def particleTranspMapper(*args,**kwargs):
        return createNode('particleTranspMapper',*args,**kwargs)
    def partition(*args,**kwargs):
        return createNode('partition',*args,**kwargs)
    def passContributionMap(*args,**kwargs):
        return createNode('passContributionMap',*args,**kwargs)
    def passMatrix(*args,**kwargs):
        return createNode('passMatrix',*args,**kwargs)
    def pfxHair(*args,**kwargs):
        return createNode('pfxHair',*args,**kwargs)
    def pfxToon(*args,**kwargs):
        return createNode('pfxToon',*args,**kwargs)
    def phong(*args,**kwargs):
        return createNode('phong',*args,**kwargs)
    def phongE(*args,**kwargs):
        return createNode('phongE',*args,**kwargs)
    def pivot2dManip(*args,**kwargs):
        return createNode('pivot2dManip',*args,**kwargs)
    def pivotAndOrientManip(*args,**kwargs):
        return createNode('pivotAndOrientManip',*args,**kwargs)
    def place2dTexture(*args,**kwargs):
        return createNode('place2dTexture',*args,**kwargs)
    def place3dTexture(*args,**kwargs):
        return createNode('place3dTexture',*args,**kwargs)
    def placerTool(*args,**kwargs):
        return createNode('placerTool',*args,**kwargs)
    def planarProjManip(*args,**kwargs):
        return createNode('planarProjManip',*args,**kwargs)
    def planarTrimSurface(*args,**kwargs):
        return createNode('planarTrimSurface',*args,**kwargs)
    def plusMinusAverage(*args,**kwargs):
        return createNode('plusMinusAverage',*args,**kwargs)
    def pointConstraint(*args,**kwargs):
        return createNode('pointConstraint',*args,**kwargs)
    def pointEmitter(*args,**kwargs):
        return createNode('pointEmitter',*args,**kwargs)
    def pointLight(*args,**kwargs):
        return createNode('pointLight',*args,**kwargs)
    def pointMatrixMult(*args,**kwargs):
        return createNode('pointMatrixMult',*args,**kwargs)
    def pointOnCurveInfo(*args,**kwargs):
        return createNode('pointOnCurveInfo',*args,**kwargs)
    def pointOnCurveManip(*args,**kwargs):
        return createNode('pointOnCurveManip',*args,**kwargs)
    def pointOnLineManip(*args,**kwargs):
        return createNode('pointOnLineManip',*args,**kwargs)
    def pointOnPolyConstraint(*args,**kwargs):
        return createNode('pointOnPolyConstraint',*args,**kwargs)
    def pointOnSurfManip(*args,**kwargs):
        return createNode('pointOnSurfManip',*args,**kwargs)
    def pointOnSurfaceInfo(*args,**kwargs):
        return createNode('pointOnSurfaceInfo',*args,**kwargs)
    def pointOnSurfaceManip(*args,**kwargs):
        return createNode('pointOnSurfaceManip',*args,**kwargs)
    def poleVectorConstraint(*args,**kwargs):
        return createNode('poleVectorConstraint',*args,**kwargs)
    def polyAppend(*args,**kwargs):
        return createNode('polyAppend',*args,**kwargs)
    def polyAppendVertex(*args,**kwargs):
        return createNode('polyAppendVertex',*args,**kwargs)
    def polyAutoProj(*args,**kwargs):
        return createNode('polyAutoProj',*args,**kwargs)
    def polyAutoProjManip(*args,**kwargs):
        return createNode('polyAutoProjManip',*args,**kwargs)
    def polyAverageVertex(*args,**kwargs):
        return createNode('polyAverageVertex',*args,**kwargs)
    def polyBevel(*args,**kwargs):
        return createNode('polyBevel',*args,**kwargs)
    def polyBevel2(*args,**kwargs):
        return createNode('polyBevel2',*args,**kwargs)
    def polyBevel3(*args,**kwargs):
        return createNode('polyBevel3',*args,**kwargs)
    def polyBlindData(*args,**kwargs):
        return createNode('polyBlindData',*args,**kwargs)
    def polyBoolOp(*args,**kwargs):
        return createNode('polyBoolOp',*args,**kwargs)
    def polyBridgeEdge(*args,**kwargs):
        return createNode('polyBridgeEdge',*args,**kwargs)
    def polyCBoolOp(*args,**kwargs):
        return createNode('polyCBoolOp',*args,**kwargs)
    def polyCaddyManip(*args,**kwargs):
        return createNode('polyCaddyManip',*args,**kwargs)
    def polyChipOff(*args,**kwargs):
        return createNode('polyChipOff',*args,**kwargs)
    def polyCircularize(*args,**kwargs):
        return createNode('polyCircularize',*args,**kwargs)
    def polyClean(*args,**kwargs):
        return createNode('polyClean',*args,**kwargs)
    def polyCloseBorder(*args,**kwargs):
        return createNode('polyCloseBorder',*args,**kwargs)
    def polyCollapseEdge(*args,**kwargs):
        return createNode('polyCollapseEdge',*args,**kwargs)
    def polyCollapseF(*args,**kwargs):
        return createNode('polyCollapseF',*args,**kwargs)
    def polyColorDel(*args,**kwargs):
        return createNode('polyColorDel',*args,**kwargs)
    def polyColorMod(*args,**kwargs):
        return createNode('polyColorMod',*args,**kwargs)
    def polyColorPerVertex(*args,**kwargs):
        return createNode('polyColorPerVertex',*args,**kwargs)
    def polyCone(*args,**kwargs):
        return createNode('polyCone',*args,**kwargs)
    def polyConnectComponents(*args,**kwargs):
        return createNode('polyConnectComponents',*args,**kwargs)
    def polyContourProj(*args,**kwargs):
        return createNode('polyContourProj',*args,**kwargs)
    def polyCopyUV(*args,**kwargs):
        return createNode('polyCopyUV',*args,**kwargs)
    def polyCrease(*args,**kwargs):
        return createNode('polyCrease',*args,**kwargs)
    def polyCreaseEdge(*args,**kwargs):
        return createNode('polyCreaseEdge',*args,**kwargs)
    def polyCreateFace(*args,**kwargs):
        return createNode('polyCreateFace',*args,**kwargs)
    def polyCreateToolManip(*args,**kwargs):
        return createNode('polyCreateToolManip',*args,**kwargs)
    def polyCube(*args,**kwargs):
        return createNode('polyCube',*args,**kwargs)
    def polyCut(*args,**kwargs):
        return createNode('polyCut',*args,**kwargs)
    def polyCutManip(*args,**kwargs):
        return createNode('polyCutManip',*args,**kwargs)
    def polyCutManipContainer(*args,**kwargs):
        return createNode('polyCutManipContainer',*args,**kwargs)
    def polyCylProj(*args,**kwargs):
        return createNode('polyCylProj',*args,**kwargs)
    def polyCylinder(*args,**kwargs):
        return createNode('polyCylinder',*args,**kwargs)
    def polyDelEdge(*args,**kwargs):
        return createNode('polyDelEdge',*args,**kwargs)
    def polyDelFacet(*args,**kwargs):
        return createNode('polyDelFacet',*args,**kwargs)
    def polyDelVertex(*args,**kwargs):
        return createNode('polyDelVertex',*args,**kwargs)
    def polyDisc(*args,**kwargs):
        return createNode('polyDisc',*args,**kwargs)
    def polyDuplicateEdge(*args,**kwargs):
        return createNode('polyDuplicateEdge',*args,**kwargs)
    def polyEdgeToCurve(*args,**kwargs):
        return createNode('polyEdgeToCurve',*args,**kwargs)
    def polyEditEdgeFlow(*args,**kwargs):
        return createNode('polyEditEdgeFlow',*args,**kwargs)
    def polyExtrudeEdge(*args,**kwargs):
        return createNode('polyExtrudeEdge',*args,**kwargs)
    def polyExtrudeFace(*args,**kwargs):
        return createNode('polyExtrudeFace',*args,**kwargs)
    def polyExtrudeVertex(*args,**kwargs):
        return createNode('polyExtrudeVertex',*args,**kwargs)
    def polyFlipEdge(*args,**kwargs):
        return createNode('polyFlipEdge',*args,**kwargs)
    def polyFlipUV(*args,**kwargs):
        return createNode('polyFlipUV',*args,**kwargs)
    def polyGear(*args,**kwargs):
        return createNode('polyGear',*args,**kwargs)
    def polyHelix(*args,**kwargs):
        return createNode('polyHelix',*args,**kwargs)
    def polyHoleFace(*args,**kwargs):
        return createNode('polyHoleFace',*args,**kwargs)
    def polyLayoutUV(*args,**kwargs):
        return createNode('polyLayoutUV',*args,**kwargs)
    def polyMapCut(*args,**kwargs):
        return createNode('polyMapCut',*args,**kwargs)
    def polyMapDel(*args,**kwargs):
        return createNode('polyMapDel',*args,**kwargs)
    def polyMapSew(*args,**kwargs):
        return createNode('polyMapSew',*args,**kwargs)
    def polyMapSewMove(*args,**kwargs):
        return createNode('polyMapSewMove',*args,**kwargs)
    def polyMappingManip(*args,**kwargs):
        return createNode('polyMappingManip',*args,**kwargs)
    def polyMergeEdge(*args,**kwargs):
        return createNode('polyMergeEdge',*args,**kwargs)
    def polyMergeFace(*args,**kwargs):
        return createNode('polyMergeFace',*args,**kwargs)
    def polyMergeUV(*args,**kwargs):
        return createNode('polyMergeUV',*args,**kwargs)
    def polyMergeVert(*args,**kwargs):
        return createNode('polyMergeVert',*args,**kwargs)
    def polyMergeVertsManip(*args,**kwargs):
        return createNode('polyMergeVertsManip',*args,**kwargs)
    def polyMirror(*args,**kwargs):
        return createNode('polyMirror',*args,**kwargs)
    def polyMirrorManipContainer(*args,**kwargs):
        return createNode('polyMirrorManipContainer',*args,**kwargs)
    def polyModifierManip(*args,**kwargs):
        return createNode('polyModifierManip',*args,**kwargs)
    def polyModifierManipContainer(*args,**kwargs):
        return createNode('polyModifierManipContainer',*args,**kwargs)
    def polyMoveEdge(*args,**kwargs):
        return createNode('polyMoveEdge',*args,**kwargs)
    def polyMoveFace(*args,**kwargs):
        return createNode('polyMoveFace',*args,**kwargs)
    def polyMoveFacetUV(*args,**kwargs):
        return createNode('polyMoveFacetUV',*args,**kwargs)
    def polyMoveUV(*args,**kwargs):
        return createNode('polyMoveUV',*args,**kwargs)
    def polyMoveUVManip(*args,**kwargs):
        return createNode('polyMoveUVManip',*args,**kwargs)
    def polyMoveVertex(*args,**kwargs):
        return createNode('polyMoveVertex',*args,**kwargs)
    def polyMoveVertexManip(*args,**kwargs):
        return createNode('polyMoveVertexManip',*args,**kwargs)
    def polyNormal(*args,**kwargs):
        return createNode('polyNormal',*args,**kwargs)
    def polyNormalPerVertex(*args,**kwargs):
        return createNode('polyNormalPerVertex',*args,**kwargs)
    def polyNormalizeUV(*args,**kwargs):
        return createNode('polyNormalizeUV',*args,**kwargs)
    def polyOptUvs(*args,**kwargs):
        return createNode('polyOptUvs',*args,**kwargs)
    def polyPassThru(*args,**kwargs):
        return createNode('polyPassThru',*args,**kwargs)
    def polyPinUV(*args,**kwargs):
        return createNode('polyPinUV',*args,**kwargs)
    def polyPipe(*args,**kwargs):
        return createNode('polyPipe',*args,**kwargs)
    def polyPlanarProj(*args,**kwargs):
        return createNode('polyPlanarProj',*args,**kwargs)
    def polyPlane(*args,**kwargs):
        return createNode('polyPlane',*args,**kwargs)
    def polyPlatonic(*args,**kwargs):
        return createNode('polyPlatonic',*args,**kwargs)
    def polyPlatonicSolid(*args,**kwargs):
        return createNode('polyPlatonicSolid',*args,**kwargs)
    def polyPoke(*args,**kwargs):
        return createNode('polyPoke',*args,**kwargs)
    def polyPokeManip(*args,**kwargs):
        return createNode('polyPokeManip',*args,**kwargs)
    def polyPrimitiveMisc(*args,**kwargs):
        return createNode('polyPrimitiveMisc',*args,**kwargs)
    def polyPrism(*args,**kwargs):
        return createNode('polyPrism',*args,**kwargs)
    def polyProj(*args,**kwargs):
        return createNode('polyProj',*args,**kwargs)
    def polyProjManip(*args,**kwargs):
        return createNode('polyProjManip',*args,**kwargs)
    def polyProjectCurve(*args,**kwargs):
        return createNode('polyProjectCurve',*args,**kwargs)
    def polyPyramid(*args,**kwargs):
        return createNode('polyPyramid',*args,**kwargs)
    def polyQuad(*args,**kwargs):
        return createNode('polyQuad',*args,**kwargs)
    def polyReduce(*args,**kwargs):
        return createNode('polyReduce',*args,**kwargs)
    def polyRemesh(*args,**kwargs):
        return createNode('polyRemesh',*args,**kwargs)
    def polyRetopo(*args,**kwargs):
        return createNode('polyRetopo',*args,**kwargs)
    def polySelectEditFeedbackManip(*args,**kwargs):
        return createNode('polySelectEditFeedbackManip',*args,**kwargs)
    def polySeparate(*args,**kwargs):
        return createNode('polySeparate',*args,**kwargs)
    def polySewEdge(*args,**kwargs):
        return createNode('polySewEdge',*args,**kwargs)
    def polySmooth(*args,**kwargs):
        return createNode('polySmooth',*args,**kwargs)
    def polySmoothFace(*args,**kwargs):
        return createNode('polySmoothFace',*args,**kwargs)
    def polySmoothProxy(*args,**kwargs):
        return createNode('polySmoothProxy',*args,**kwargs)
    def polySoftEdge(*args,**kwargs):
        return createNode('polySoftEdge',*args,**kwargs)
    def polySphProj(*args,**kwargs):
        return createNode('polySphProj',*args,**kwargs)
    def polySphere(*args,**kwargs):
        return createNode('polySphere',*args,**kwargs)
    def polySpinEdge(*args,**kwargs):
        return createNode('polySpinEdge',*args,**kwargs)
    def polySplit(*args,**kwargs):
        return createNode('polySplit',*args,**kwargs)
    def polySplitEdge(*args,**kwargs):
        return createNode('polySplitEdge',*args,**kwargs)
    def polySplitRing(*args,**kwargs):
        return createNode('polySplitRing',*args,**kwargs)
    def polySplitToolManip1(*args,**kwargs):
        return createNode('polySplitToolManip1',*args,**kwargs)
    def polySplitVert(*args,**kwargs):
        return createNode('polySplitVert',*args,**kwargs)
    def polyStraightenUVBorder(*args,**kwargs):
        return createNode('polyStraightenUVBorder',*args,**kwargs)
    def polySubdEdge(*args,**kwargs):
        return createNode('polySubdEdge',*args,**kwargs)
    def polySubdFace(*args,**kwargs):
        return createNode('polySubdFace',*args,**kwargs)
    def polySuperShape(*args,**kwargs):
        return createNode('polySuperShape',*args,**kwargs)
    def polyToSubdiv(*args,**kwargs):
        return createNode('polyToSubdiv',*args,**kwargs)
    def polyToolFeedbackManip(*args,**kwargs):
        return createNode('polyToolFeedbackManip',*args,**kwargs)
    def polyTorus(*args,**kwargs):
        return createNode('polyTorus',*args,**kwargs)
    def polyTransfer(*args,**kwargs):
        return createNode('polyTransfer',*args,**kwargs)
    def polyTriangulate(*args,**kwargs):
        return createNode('polyTriangulate',*args,**kwargs)
    def polyTweak(*args,**kwargs):
        return createNode('polyTweak',*args,**kwargs)
    def polyTweakUV(*args,**kwargs):
        return createNode('polyTweakUV',*args,**kwargs)
    def polyUVRectangle(*args,**kwargs):
        return createNode('polyUVRectangle',*args,**kwargs)
    def polyUnite(*args,**kwargs):
        return createNode('polyUnite',*args,**kwargs)
    def polyVertexNormalManip(*args,**kwargs):
        return createNode('polyVertexNormalManip',*args,**kwargs)
    def polyWedgeFace(*args,**kwargs):
        return createNode('polyWedgeFace',*args,**kwargs)
    def poseInterpolator(*args,**kwargs):
        return createNode('poseInterpolator',*args,**kwargs)
    def poseInterpolatorManager(*args,**kwargs):
        return createNode('poseInterpolatorManager',*args,**kwargs)
    def positionMarker(*args,**kwargs):
        return createNode('positionMarker',*args,**kwargs)
    def postProcessList(*args,**kwargs):
        return createNode('postProcessList',*args,**kwargs)
    def precompExport(*args,**kwargs):
        return createNode('precompExport',*args,**kwargs)
    def premultiply(*args,**kwargs):
        return createNode('premultiply',*args,**kwargs)
    def projectCurve(*args,**kwargs):
        return createNode('projectCurve',*args,**kwargs)
    def projectTangent(*args,**kwargs):
        return createNode('projectTangent',*args,**kwargs)
    def projectTangentManip(*args,**kwargs):
        return createNode('projectTangentManip',*args,**kwargs)
    def projection(*args,**kwargs):
        return createNode('projection',*args,**kwargs)
    def projectionManip(*args,**kwargs):
        return createNode('projectionManip',*args,**kwargs)
    def projectionMultiManip(*args,**kwargs):
        return createNode('projectionMultiManip',*args,**kwargs)
    def projectionUVManip(*args,**kwargs):
        return createNode('projectionUVManip',*args,**kwargs)
    def propModManip(*args,**kwargs):
        return createNode('propModManip',*args,**kwargs)
    def propMoveTriadManip(*args,**kwargs):
        return createNode('propMoveTriadManip',*args,**kwargs)
    def proxyManager(*args,**kwargs):
        return createNode('proxyManager',*args,**kwargs)
    def psdFileTex(*args,**kwargs):
        return createNode('psdFileTex',*args,**kwargs)
    def quadPtOnLineManip(*args,**kwargs):
        return createNode('quadPtOnLineManip',*args,**kwargs)
    def quadShadingSwitch(*args,**kwargs):
        return createNode('quadShadingSwitch',*args,**kwargs)
    def quatAdd(*args,**kwargs):
        return createNode('quatAdd',*args,**kwargs)
    def quatConjugate(*args,**kwargs):
        return createNode('quatConjugate',*args,**kwargs)
    def quatInvert(*args,**kwargs):
        return createNode('quatInvert',*args,**kwargs)
    def quatNegate(*args,**kwargs):
        return createNode('quatNegate',*args,**kwargs)
    def quatNormalize(*args,**kwargs):
        return createNode('quatNormalize',*args,**kwargs)
    def quatProd(*args,**kwargs):
        return createNode('quatProd',*args,**kwargs)
    def quatSub(*args,**kwargs):
        return createNode('quatSub',*args,**kwargs)
    def quatToEuler(*args,**kwargs):
        return createNode('quatToEuler',*args,**kwargs)
    def radialField(*args,**kwargs):
        return createNode('radialField',*args,**kwargs)
    def ramp(*args,**kwargs):
        return createNode('ramp',*args,**kwargs)
    def rampShader(*args,**kwargs):
        return createNode('rampShader',*args,**kwargs)
    def rbfSrf(*args,**kwargs):
        return createNode('rbfSrf',*args,**kwargs)
    def rbfSrfManip(*args,**kwargs):
        return createNode('rbfSrfManip',*args,**kwargs)
    def rebuildCurve(*args,**kwargs):
        return createNode('rebuildCurve',*args,**kwargs)
    def rebuildSurface(*args,**kwargs):
        return createNode('rebuildSurface',*args,**kwargs)
    def record(*args,**kwargs):
        return createNode('record',*args,**kwargs)
    def reference(*args,**kwargs):
        return createNode('reference',*args,**kwargs)
    def relOverride(*args,**kwargs):
        return createNode('relOverride',*args,**kwargs)
    def relUniqueOverride(*args,**kwargs):
        return createNode('relUniqueOverride',*args,**kwargs)
    def remapColor(*args,**kwargs):
        return createNode('remapColor',*args,**kwargs)
    def remapHsv(*args,**kwargs):
        return createNode('remapHsv',*args,**kwargs)
    def remapValue(*args,**kwargs):
        return createNode('remapValue',*args,**kwargs)
    def renderBox(*args,**kwargs):
        return createNode('renderBox',*args,**kwargs)
    def renderCone(*args,**kwargs):
        return createNode('renderCone',*args,**kwargs)
    def renderGlobals(*args,**kwargs):
        return createNode('renderGlobals',*args,**kwargs)
    def renderGlobalsList(*args,**kwargs):
        return createNode('renderGlobalsList',*args,**kwargs)
    def renderLayer(*args,**kwargs):
        return createNode('renderLayer',*args,**kwargs)
    def renderLayerManager(*args,**kwargs):
        return createNode('renderLayerManager',*args,**kwargs)
    def renderPass(*args,**kwargs):
        return createNode('renderPass',*args,**kwargs)
    def renderPassSet(*args,**kwargs):
        return createNode('renderPassSet',*args,**kwargs)
    def renderQuality(*args,**kwargs):
        return createNode('renderQuality',*args,**kwargs)
    def renderRect(*args,**kwargs):
        return createNode('renderRect',*args,**kwargs)
    def renderSettingsChildCollection(*args,**kwargs):
        return createNode('renderSettingsChildCollection',*args,**kwargs)
    def renderSettingsCollection(*args,**kwargs):
        return createNode('renderSettingsCollection',*args,**kwargs)
    def renderSetup(*args,**kwargs):
        return createNode('renderSetup',*args,**kwargs)
    def renderSetupLayer(*args,**kwargs):
        return createNode('renderSetupLayer',*args,**kwargs)
    def renderSphere(*args,**kwargs):
        return createNode('renderSphere',*args,**kwargs)
    def renderTarget(*args,**kwargs):
        return createNode('renderTarget',*args,**kwargs)
    def renderedImageSource(*args,**kwargs):
        return createNode('renderedImageSource',*args,**kwargs)
    def reorderUVSet(*args,**kwargs):
        return createNode('reorderUVSet',*args,**kwargs)
    def resolution(*args,**kwargs):
        return createNode('resolution',*args,**kwargs)
    def resultCurveTimeToAngular(*args,**kwargs):
        return createNode('resultCurveTimeToAngular',*args,**kwargs)
    def resultCurveTimeToLinear(*args,**kwargs):
        return createNode('resultCurveTimeToLinear',*args,**kwargs)
    def resultCurveTimeToTime(*args,**kwargs):
        return createNode('resultCurveTimeToTime',*args,**kwargs)
    def resultCurveTimeToUnitless(*args,**kwargs):
        return createNode('resultCurveTimeToUnitless',*args,**kwargs)
    def reverse(*args,**kwargs):
        return createNode('reverse',*args,**kwargs)
    def reverseCurve(*args,**kwargs):
        return createNode('reverseCurve',*args,**kwargs)
    def reverseCurveManip(*args,**kwargs):
        return createNode('reverseCurveManip',*args,**kwargs)
    def reverseSurface(*args,**kwargs):
        return createNode('reverseSurface',*args,**kwargs)
    def reverseSurfaceManip(*args,**kwargs):
        return createNode('reverseSurfaceManip',*args,**kwargs)
    def revolve(*args,**kwargs):
        return createNode('revolve',*args,**kwargs)
    def revolveManip(*args,**kwargs):
        return createNode('revolveManip',*args,**kwargs)
    def revolvedPrimitiveManip(*args,**kwargs):
        return createNode('revolvedPrimitiveManip',*args,**kwargs)
    def rgbToHsv(*args,**kwargs):
        return createNode('rgbToHsv',*args,**kwargs)
    def rigidBody(*args,**kwargs):
        return createNode('rigidBody',*args,**kwargs)
    def rigidConstraint(*args,**kwargs):
        return createNode('rigidConstraint',*args,**kwargs)
    def rigidSolver(*args,**kwargs):
        return createNode('rigidSolver',*args,**kwargs)
    def rock(*args,**kwargs):
        return createNode('rock',*args,**kwargs)
    def rotateHelper(*args,**kwargs):
        return createNode('rotateHelper',*args,**kwargs)
    def rotateLimitsManip(*args,**kwargs):
        return createNode('rotateLimitsManip',*args,**kwargs)
    def rotateManip(*args,**kwargs):
        return createNode('rotateManip',*args,**kwargs)
    def rotateUV2dManip(*args,**kwargs):
        return createNode('rotateUV2dManip',*args,**kwargs)
    def roundConstantRadius(*args,**kwargs):
        return createNode('roundConstantRadius',*args,**kwargs)
    def roundConstantRadiusManip(*args,**kwargs):
        return createNode('roundConstantRadiusManip',*args,**kwargs)
    def roundRadiusCrvManip(*args,**kwargs):
        return createNode('roundRadiusCrvManip',*args,**kwargs)
    def roundRadiusManip(*args,**kwargs):
        return createNode('roundRadiusManip',*args,**kwargs)
    def sampler(*args,**kwargs):
        return createNode('sampler',*args,**kwargs)
    def samplerInfo(*args,**kwargs):
        return createNode('samplerInfo',*args,**kwargs)
    def scaleConstraint(*args,**kwargs):
        return createNode('scaleConstraint',*args,**kwargs)
    def scaleLimitsManip(*args,**kwargs):
        return createNode('scaleLimitsManip',*args,**kwargs)
    def scaleManip(*args,**kwargs):
        return createNode('scaleManip',*args,**kwargs)
    def scaleUV2dManip(*args,**kwargs):
        return createNode('scaleUV2dManip',*args,**kwargs)
    def screenAlignedCircleManip(*args,**kwargs):
        return createNode('screenAlignedCircleManip',*args,**kwargs)
    def script(*args,**kwargs):
        return createNode('script',*args,**kwargs)
    def scriptManip(*args,**kwargs):
        return createNode('scriptManip',*args,**kwargs)
    def sculpt(*args,**kwargs):
        return createNode('sculpt',*args,**kwargs)
    def selectionListOperator(*args,**kwargs):
        return createNode('selectionListOperator',*args,**kwargs)
    def selector(*args,**kwargs):
        return createNode('selector',*args,**kwargs)
    def sequenceManager(*args,**kwargs):
        return createNode('sequenceManager',*args,**kwargs)
    def sequencer(*args,**kwargs):
        return createNode('sequencer',*args,**kwargs)
    def setRange(*args,**kwargs):
        return createNode('setRange',*args,**kwargs)
    def shaderGlow(*args,**kwargs):
        return createNode('shaderGlow',*args,**kwargs)
    def shaderOverride(*args,**kwargs):
        return createNode('shaderOverride',*args,**kwargs)
    def shadingEngine(*args,**kwargs):
        return createNode('shadingEngine',*args,**kwargs)
    def shadingMap(*args,**kwargs):
        return createNode('shadingMap',*args,**kwargs)
    def shapeEditorManager(*args,**kwargs):
        return createNode('shapeEditorManager',*args,**kwargs)
    def shellDeformer(*args,**kwargs):
        return createNode('shellDeformer',*args,**kwargs)
    def shellTessellate(*args,**kwargs):
        return createNode('shellTessellate',*args,**kwargs)
    def shot(*args,**kwargs):
        return createNode('shot',*args,**kwargs)
    def shrinkWrap(*args,**kwargs):
        return createNode('shrinkWrap',*args,**kwargs)
    def simpleSelector(*args,**kwargs):
        return createNode('simpleSelector',*args,**kwargs)
    def simpleTestNode(*args,**kwargs):
        return createNode('simpleTestNode',*args,**kwargs)
    def simpleVolumeShader(*args,**kwargs):
        return createNode('simpleVolumeShader',*args,**kwargs)
    def simplexNoise(*args,**kwargs):
        return createNode('simplexNoise',*args,**kwargs)
    def singleShadingSwitch(*args,**kwargs):
        return createNode('singleShadingSwitch',*args,**kwargs)
    def sketchPlane(*args,**kwargs):
        return createNode('sketchPlane',*args,**kwargs)
    def skinBinding(*args,**kwargs):
        return createNode('skinBinding',*args,**kwargs)
    def skinCluster(*args,**kwargs):
        return createNode('skinCluster',*args,**kwargs)
    def smoothCurve(*args,**kwargs):
        return createNode('smoothCurve',*args,**kwargs)
    def smoothTangentSrf(*args,**kwargs):
        return createNode('smoothTangentSrf',*args,**kwargs)
    def snapUV2dManip(*args,**kwargs):
        return createNode('snapUV2dManip',*args,**kwargs)
    def snapshot(*args,**kwargs):
        return createNode('snapshot',*args,**kwargs)
    def snapshotShape(*args,**kwargs):
        return createNode('snapshotShape',*args,**kwargs)
    def snow(*args,**kwargs):
        return createNode('snow',*args,**kwargs)
    def softMod(*args,**kwargs):
        return createNode('softMod',*args,**kwargs)
    def softModHandle(*args,**kwargs):
        return createNode('softModHandle',*args,**kwargs)
    def softModManip(*args,**kwargs):
        return createNode('softModManip',*args,**kwargs)
    def solidFractal(*args,**kwargs):
        return createNode('solidFractal',*args,**kwargs)
    def spBirailSrf(*args,**kwargs):
        return createNode('spBirailSrf',*args,**kwargs)
    def sphericalProjManip(*args,**kwargs):
        return createNode('sphericalProjManip',*args,**kwargs)
    def spotCylinderManip(*args,**kwargs):
        return createNode('spotCylinderManip',*args,**kwargs)
    def spotLight(*args,**kwargs):
        return createNode('spotLight',*args,**kwargs)
    def spotManip(*args,**kwargs):
        return createNode('spotManip',*args,**kwargs)
    def spring(*args,**kwargs):
        return createNode('spring',*args,**kwargs)
    def squareSrf(*args,**kwargs):
        return createNode('squareSrf',*args,**kwargs)
    def squareSrfManip(*args,**kwargs):
        return createNode('squareSrfManip',*args,**kwargs)
    def stencil(*args,**kwargs):
        return createNode('stencil',*args,**kwargs)
    def stereoRigCamera(*args,**kwargs):
        return createNode('stereoRigCamera',*args,**kwargs)
    def stitchAsNurbsShell(*args,**kwargs):
        return createNode('stitchAsNurbsShell',*args,**kwargs)
    def stitchSrf(*args,**kwargs):
        return createNode('stitchSrf',*args,**kwargs)
    def stitchSrfManip(*args,**kwargs):
        return createNode('stitchSrfManip',*args,**kwargs)
    def stroke(*args,**kwargs):
        return createNode('stroke',*args,**kwargs)
    def strokeGlobals(*args,**kwargs):
        return createNode('strokeGlobals',*args,**kwargs)
    def stucco(*args,**kwargs):
        return createNode('stucco',*args,**kwargs)
    def styleCurve(*args,**kwargs):
        return createNode('styleCurve',*args,**kwargs)
    def subCurve(*args,**kwargs):
        return createNode('subCurve',*args,**kwargs)
    def subSurface(*args,**kwargs):
        return createNode('subSurface',*args,**kwargs)
    def subdAddTopology(*args,**kwargs):
        return createNode('subdAddTopology',*args,**kwargs)
    def subdAutoProj(*args,**kwargs):
        return createNode('subdAutoProj',*args,**kwargs)
    def subdBlindData(*args,**kwargs):
        return createNode('subdBlindData',*args,**kwargs)
    def subdCleanTopology(*args,**kwargs):
        return createNode('subdCleanTopology',*args,**kwargs)
    def subdHierBlind(*args,**kwargs):
        return createNode('subdHierBlind',*args,**kwargs)
    def subdLayoutUV(*args,**kwargs):
        return createNode('subdLayoutUV',*args,**kwargs)
    def subdMapCut(*args,**kwargs):
        return createNode('subdMapCut',*args,**kwargs)
    def subdMapSewMove(*args,**kwargs):
        return createNode('subdMapSewMove',*args,**kwargs)
    def subdMappingManip(*args,**kwargs):
        return createNode('subdMappingManip',*args,**kwargs)
    def subdPlanarProj(*args,**kwargs):
        return createNode('subdPlanarProj',*args,**kwargs)
    def subdProjManip(*args,**kwargs):
        return createNode('subdProjManip',*args,**kwargs)
    def subdTweak(*args,**kwargs):
        return createNode('subdTweak',*args,**kwargs)
    def subdTweakUV(*args,**kwargs):
        return createNode('subdTweakUV',*args,**kwargs)
    def subdiv(*args,**kwargs):
        return createNode('subdiv',*args,**kwargs)
    def subdivCollapse(*args,**kwargs):
        return createNode('subdivCollapse',*args,**kwargs)
    def subdivComponentId(*args,**kwargs):
        return createNode('subdivComponentId',*args,**kwargs)
    def subdivReverseFaces(*args,**kwargs):
        return createNode('subdivReverseFaces',*args,**kwargs)
    def subdivSurfaceVarGroup(*args,**kwargs):
        return createNode('subdivSurfaceVarGroup',*args,**kwargs)
    def subdivToNurbs(*args,**kwargs):
        return createNode('subdivToNurbs',*args,**kwargs)
    def subdivToPoly(*args,**kwargs):
        return createNode('subdivToPoly',*args,**kwargs)
    def substance(*args,**kwargs):
        return createNode('substance',*args,**kwargs)
    def substanceOutput(*args,**kwargs):
        return createNode('substanceOutput',*args,**kwargs)
    def surfaceEdManip(*args,**kwargs):
        return createNode('surfaceEdManip',*args,**kwargs)
    def surfaceInfo(*args,**kwargs):
        return createNode('surfaceInfo',*args,**kwargs)
    def surfaceLuminance(*args,**kwargs):
        return createNode('surfaceLuminance',*args,**kwargs)
    def surfaceShader(*args,**kwargs):
        return createNode('surfaceShader',*args,**kwargs)
    def surfaceVarGroup(*args,**kwargs):
        return createNode('surfaceVarGroup',*args,**kwargs)
    def svgToPoly(*args,**kwargs):
        return createNode('svgToPoly',*args,**kwargs)
    def symmetryConstraint(*args,**kwargs):
        return createNode('symmetryConstraint',*args,**kwargs)
    def tangentConstraint(*args,**kwargs):
        return createNode('tangentConstraint',*args,**kwargs)
    def tension(*args,**kwargs):
        return createNode('tension',*args,**kwargs)
    def texLattice(*args,**kwargs):
        return createNode('texLattice',*args,**kwargs)
    def texLatticeDeformManip(*args,**kwargs):
        return createNode('texLatticeDeformManip',*args,**kwargs)
    def texMoveShellManip(*args,**kwargs):
        return createNode('texMoveShellManip',*args,**kwargs)
    def texSmoothManip(*args,**kwargs):
        return createNode('texSmoothManip',*args,**kwargs)
    def texSmudgeUVManip(*args,**kwargs):
        return createNode('texSmudgeUVManip',*args,**kwargs)
    def textButtonManip(*args,**kwargs):
        return createNode('textButtonManip',*args,**kwargs)
    def textManip2D(*args,**kwargs):
        return createNode('textManip2D',*args,**kwargs)
    def texture3dManip(*args,**kwargs):
        return createNode('texture3dManip',*args,**kwargs)
    def textureBakeSet(*args,**kwargs):
        return createNode('textureBakeSet',*args,**kwargs)
    def textureDeformer(*args,**kwargs):
        return createNode('textureDeformer',*args,**kwargs)
    def textureDeformerHandle(*args,**kwargs):
        return createNode('textureDeformerHandle',*args,**kwargs)
    def textureToGeom(*args,**kwargs):
        return createNode('textureToGeom',*args,**kwargs)
    def time(*args,**kwargs):
        return createNode('time',*args,**kwargs)
    def timeEditor(*args,**kwargs):
        return createNode('timeEditor',*args,**kwargs)
    def timeEditorAnimSource(*args,**kwargs):
        return createNode('timeEditorAnimSource',*args,**kwargs)
    def timeEditorClip(*args,**kwargs):
        return createNode('timeEditorClip',*args,**kwargs)
    def timeEditorClipBase(*args,**kwargs):
        return createNode('timeEditorClipBase',*args,**kwargs)
    def timeEditorClipEvaluator(*args,**kwargs):
        return createNode('timeEditorClipEvaluator',*args,**kwargs)
    def timeEditorInterpolator(*args,**kwargs):
        return createNode('timeEditorInterpolator',*args,**kwargs)
    def timeEditorTracks(*args,**kwargs):
        return createNode('timeEditorTracks',*args,**kwargs)
    def timeFunction(*args,**kwargs):
        return createNode('timeFunction',*args,**kwargs)
    def timeToUnitConversion(*args,**kwargs):
        return createNode('timeToUnitConversion',*args,**kwargs)
    def timeWarp(*args,**kwargs):
        return createNode('timeWarp',*args,**kwargs)
    def toggleManip(*args,**kwargs):
        return createNode('toggleManip',*args,**kwargs)
    def toggleOnLineManip(*args,**kwargs):
        return createNode('toggleOnLineManip',*args,**kwargs)
    def toolDrawManip(*args,**kwargs):
        return createNode('toolDrawManip',*args,**kwargs)
    def toolDrawManip2D(*args,**kwargs):
        return createNode('toolDrawManip2D',*args,**kwargs)
    def toonLineAttributes(*args,**kwargs):
        return createNode('toonLineAttributes',*args,**kwargs)
    def towPointOnCurveManip(*args,**kwargs):
        return createNode('towPointOnCurveManip',*args,**kwargs)
    def towPointOnSurfaceManip(*args,**kwargs):
        return createNode('towPointOnSurfaceManip',*args,**kwargs)
    def trackInfoManager(*args,**kwargs):
        return createNode('trackInfoManager',*args,**kwargs)
    def trans2dManip(*args,**kwargs):
        return createNode('trans2dManip',*args,**kwargs)
    def transUV2dManip(*args,**kwargs):
        return createNode('transUV2dManip',*args,**kwargs)
    def transferAttributes(*args,**kwargs):
        return createNode('transferAttributes',*args,**kwargs)
    def transform(*args,**kwargs):
        return createNode('transform',*args,**kwargs)
    def transformGeometry(*args,**kwargs):
        return createNode('transformGeometry',*args,**kwargs)
    def translateLimitsManip(*args,**kwargs):
        return createNode('translateLimitsManip',*args,**kwargs)
    def translateManip(*args,**kwargs):
        return createNode('translateManip',*args,**kwargs)
    def translateUVManip(*args,**kwargs):
        return createNode('translateUVManip',*args,**kwargs)
    def transposeMatrix(*args,**kwargs):
        return createNode('transposeMatrix',*args,**kwargs)
    def trim(*args,**kwargs):
        return createNode('trim',*args,**kwargs)
    def trimManip(*args,**kwargs):
        return createNode('trimManip',*args,**kwargs)
    def trimWithBoundaries(*args,**kwargs):
        return createNode('trimWithBoundaries',*args,**kwargs)
    def triplanarProjManip(*args,**kwargs):
        return createNode('triplanarProjManip',*args,**kwargs)
    def tripleShadingSwitch(*args,**kwargs):
        return createNode('tripleShadingSwitch',*args,**kwargs)
    def trsInsertManip(*args,**kwargs):
        return createNode('trsInsertManip',*args,**kwargs)
    def trsManip(*args,**kwargs):
        return createNode('trsManip',*args,**kwargs)
    def turbulenceField(*args,**kwargs):
        return createNode('turbulenceField',*args,**kwargs)
    def turbulenceManip(*args,**kwargs):
        return createNode('turbulenceManip',*args,**kwargs)
    def tweak(*args,**kwargs):
        return createNode('tweak',*args,**kwargs)
    def type(*args,**kwargs):
        return createNode('type',*args,**kwargs)
    def typeExtrude(*args,**kwargs):
        return createNode('typeExtrude',*args,**kwargs)
    def typeManip(*args,**kwargs):
        return createNode('typeManip',*args,**kwargs)
    def uniformField(*args,**kwargs):
        return createNode('uniformField',*args,**kwargs)
    def unitConversion(*args,**kwargs):
        return createNode('unitConversion',*args,**kwargs)
    def unitToTimeConversion(*args,**kwargs):
        return createNode('unitToTimeConversion',*args,**kwargs)
    def unknown(*args,**kwargs):
        return createNode('unknown',*args,**kwargs)
    def unknownDag(*args,**kwargs):
        return createNode('unknownDag',*args,**kwargs)
    def unknownTransform(*args,**kwargs):
        return createNode('unknownTransform',*args,**kwargs)
    def unpremultiply(*args,**kwargs):
        return createNode('unpremultiply',*args,**kwargs)
    def untrim(*args,**kwargs):
        return createNode('untrim',*args,**kwargs)
    def useBackground(*args,**kwargs):
        return createNode('useBackground',*args,**kwargs)
    def uv2dManip(*args,**kwargs):
        return createNode('uv2dManip',*args,**kwargs)
    def uvChooser(*args,**kwargs):
        return createNode('uvChooser',*args,**kwargs)
    def valueOverride(*args,**kwargs):
        return createNode('valueOverride',*args,**kwargs)
    def vectorAdjust(*args,**kwargs):
        return createNode('vectorAdjust',*args,**kwargs)
    def vectorExtrude(*args,**kwargs):
        return createNode('vectorExtrude',*args,**kwargs)
    def vectorProduct(*args,**kwargs):
        return createNode('vectorProduct',*args,**kwargs)
    def vectorRenderGlobals(*args,**kwargs):
        return createNode('vectorRenderGlobals',*args,**kwargs)
    def vertexBakeSet(*args,**kwargs):
        return createNode('vertexBakeSet',*args,**kwargs)
    def viewColorManager(*args,**kwargs):
        return createNode('viewColorManager',*args,**kwargs)
    def volumeAxisField(*args,**kwargs):
        return createNode('volumeAxisField',*args,**kwargs)
    def volumeBindManip(*args,**kwargs):
        return createNode('volumeBindManip',*args,**kwargs)
    def volumeFog(*args,**kwargs):
        return createNode('volumeFog',*args,**kwargs)
    def volumeLight(*args,**kwargs):
        return createNode('volumeLight',*args,**kwargs)
    def volumeNoise(*args,**kwargs):
        return createNode('volumeNoise',*args,**kwargs)
    def volumeShader(*args,**kwargs):
        return createNode('volumeShader',*args,**kwargs)
    def vortexField(*args,**kwargs):
        return createNode('vortexField',*args,**kwargs)
    def water(*args,**kwargs):
        return createNode('water',*args,**kwargs)
    def weightGeometryFilter(*args,**kwargs):
        return createNode('weightGeometryFilter',*args,**kwargs)
    def wire(*args,**kwargs):
        return createNode('wire',*args,**kwargs)
    def wood(*args,**kwargs):
        return createNode('wood',*args,**kwargs)
    def wrap(*args,**kwargs):
        return createNode('wrap',*args,**kwargs)
    def wtAddMatrix(*args,**kwargs):
        return createNode('wtAddMatrix',*args,**kwargs)
    def xformManip(*args,**kwargs):
        return createNode('xformManip',*args,**kwargs)
    def xgmArchiveGuide(*args,**kwargs):
        return createNode('xgmArchiveGuide',*args,**kwargs)
    def xgmCardGuide(*args,**kwargs):
        return createNode('xgmCardGuide',*args,**kwargs)
    def xgmConnectivity(*args,**kwargs):
        return createNode('xgmConnectivity',*args,**kwargs)
    def xgmCurveToSpline(*args,**kwargs):
        return createNode('xgmCurveToSpline',*args,**kwargs)
    def xgmDescription(*args,**kwargs):
        return createNode('xgmDescription',*args,**kwargs)
    def xgmGuide(*args,**kwargs):
        return createNode('xgmGuide',*args,**kwargs)
    def xgmGuideManip(*args,**kwargs):
        return createNode('xgmGuideManip',*args,**kwargs)
    def xgmGuideSculptManip(*args,**kwargs):
        return createNode('xgmGuideSculptManip',*args,**kwargs)
    def xgmHairMapping(*args,**kwargs):
        return createNode('xgmHairMapping',*args,**kwargs)
    def xgmMakeGuide(*args,**kwargs):
        return createNode('xgmMakeGuide',*args,**kwargs)
    def xgmModifierBase(*args,**kwargs):
        return createNode('xgmModifierBase',*args,**kwargs)
    def xgmModifierClump(*args,**kwargs):
        return createNode('xgmModifierClump',*args,**kwargs)
    def xgmModifierCollision(*args,**kwargs):
        return createNode('xgmModifierCollision',*args,**kwargs)
    def xgmModifierCut(*args,**kwargs):
        return createNode('xgmModifierCut',*args,**kwargs)
    def xgmModifierDisplacement(*args,**kwargs):
        return createNode('xgmModifierDisplacement',*args,**kwargs)
    def xgmModifierGuide(*args,**kwargs):
        return createNode('xgmModifierGuide',*args,**kwargs)
    def xgmModifierLinearWire(*args,**kwargs):
        return createNode('xgmModifierLinearWire',*args,**kwargs)
    def xgmModifierNoise(*args,**kwargs):
        return createNode('xgmModifierNoise',*args,**kwargs)
    def xgmModifierScale(*args,**kwargs):
        return createNode('xgmModifierScale',*args,**kwargs)
    def xgmModifierSculpt(*args,**kwargs):
        return createNode('xgmModifierSculpt',*args,**kwargs)
    def xgmNurbsPatch(*args,**kwargs):
        return createNode('xgmNurbsPatch',*args,**kwargs)
    def xgmPalette(*args,**kwargs):
        return createNode('xgmPalette',*args,**kwargs)
    def xgmPatch(*args,**kwargs):
        return createNode('xgmPatch',*args,**kwargs)
    def xgmPointsManip(*args,**kwargs):
        return createNode('xgmPointsManip',*args,**kwargs)
    def xgmPointsViewer(*args,**kwargs):
        return createNode('xgmPointsViewer',*args,**kwargs)
    def xgmSeExpr(*args,**kwargs):
        return createNode('xgmSeExpr',*args,**kwargs)
    def xgmSphereGuide(*args,**kwargs):
        return createNode('xgmSphereGuide',*args,**kwargs)
    def xgmSplineBase(*args,**kwargs):
        return createNode('xgmSplineBase',*args,**kwargs)
    def xgmSplineCache(*args,**kwargs):
        return createNode('xgmSplineCache',*args,**kwargs)
    def xgmSplineDescription(*args,**kwargs):
        return createNode('xgmSplineDescription',*args,**kwargs)
    def xgmSplineGuide(*args,**kwargs):
        return createNode('xgmSplineGuide',*args,**kwargs)
    def xgmSubdPatch(*args,**kwargs):
        return createNode('xgmSubdPatch',*args,**kwargs)
